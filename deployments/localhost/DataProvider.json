{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateAvailableBorrowsETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userCollateralBalance",
          "type": "uint256"
        }
      ],
      "name": "calculateAvailableCollateralToLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userCurrentBorrowBalanceETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userCurrentFeesETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userCurrentLTV",
          "type": "uint256"
        }
      ],
      "name": "calculateCollateralNeededInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralNeededInETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateExpectedVariableBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateUserAmountToRepay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllActivePoolAssetNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllActivePools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userToLiquidate",
          "type": "address"
        }
      ],
      "name": "getMaxAmountToRepayOnLiquidation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxPrincipalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getPoolAmountInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPoolDisplayData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "asset",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "loanToValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationBonus",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositedLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userBorrowedLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userRepayAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isBorrowingEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUsableAsCollateral",
              "type": "bool"
            }
          ],
          "internalType": "struct LibFacet.getPoolDisplayDataLocalVars",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPoolLendData",
      "outputs": [
        {
          "internalType": "string",
          "name": "asset",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "depositedLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userDepositedLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userMaxRedeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositAPY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanToValue",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isUsableAsCollateral",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserGlobalData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalLiquidityBalanceETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralBalanceETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowBalanceETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFeesETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentLTV",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentLiquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "healthFactorBelowThreshold",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserPoolData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentBorrowBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalBorrowBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "variableBorrowIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdatedTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum LibFacet.InterestRateMode",
          "name": "borrowRateMode",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "usageAsCollateralEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserRewardShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x80afae5b76fa96c1a81b2104bf7a9a471882034d907d64fdc19c3c56300f7ba1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1948516",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd00d5f5bf74033c50d67a8718f25673c99185e5ff4f98c8362bf2331210988fa",
    "transactionHash": "0x80afae5b76fa96c1a81b2104bf7a9a471882034d907d64fdc19c3c56300f7ba1",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1948516",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "827d2890bced3c86a2ad1b35f517b9ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateAvailableBorrowsETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userCollateralBalance\",\"type\":\"uint256\"}],\"name\":\"calculateAvailableCollateralToLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userCurrentBorrowBalanceETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userCurrentFeesETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userCurrentLTV\",\"type\":\"uint256\"}],\"name\":\"calculateCollateralNeededInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralNeededInETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateExpectedVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateUserAmountToRepay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActivePoolAssetNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActivePools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userToLiquidate\",\"type\":\"address\"}],\"name\":\"getMaxAmountToRepayOnLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPrincipalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPoolAmountInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPoolDisplayData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"loanToValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBorrowedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBorrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUsableAsCollateral\",\"type\":\"bool\"}],\"internalType\":\"struct LibFacet.getPoolDisplayDataLocalVars\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPoolLendData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDepositedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMaxRedeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanToValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUsableAsCollateral\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserGlobalData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidityBalanceETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralBalanceETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowBalanceETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeesETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"healthFactorBelowThreshold\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBorrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalBorrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum LibFacet.InterestRateMode\",\"name\":\"borrowRateMode\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRewardShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUserGlobalData(address)\":{\"details\":\"get user data accross all pools\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lendingpool/DataProvider.sol\":\"DataProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lendingpool/DataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"../libraries/LibFacet.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract DataProvider {\\n    using WadRayMath for uint256;\\n\\n    struct GetUserGlobalDataVars {\\n        uint256 compoundedLiquidityBalance;\\n        uint256 compoundedBorrowBalance;\\n        uint256 originationFee;\\n        uint256 reserveDecimals;\\n        uint256 baseLTV;\\n        uint256 liquidationThreshold;\\n        uint256 tokenUnit;\\n        uint256 poolUnitPrice;\\n        uint256 liquidityBalanceETH;\\n        bool userUsesReserveAsCollateral;\\n        bool usageAsCollateralEnabled;\\n    }\\n\\n    /// @dev get user data accross all pools\\n    function getUserGlobalData(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 totalLiquidityBalanceETH,\\n            uint256 totalCollateralBalanceETH,\\n            uint256 totalBorrowBalanceETH,\\n            uint256 totalFeesETH,\\n            uint256 currentLTV,\\n            uint256 currentLiquidationThreshold,\\n            uint256 healthFactor,\\n            bool healthFactorBelowThreshold\\n        )\\n    {\\n        GetUserGlobalDataVars memory vars;\\n        LendingPoolCore core = LendingPoolCore(address(this));\\n        address[] memory pools = LibFacet.lpcStorage().allPools;\\n\\n        for (uint256 poolIdx = 0; poolIdx < pools.length; poolIdx++) {\\n            (\\n                vars.compoundedLiquidityBalance,\\n                vars.compoundedBorrowBalance,\\n                vars.originationFee,\\n                vars.userUsesReserveAsCollateral\\n            ) = core.getUserBasicPoolData(pools[poolIdx], _user);\\n\\n            if (\\n                vars.compoundedBorrowBalance == 0 &&\\n                vars.compoundedLiquidityBalance == 0\\n            ) continue;\\n\\n            (\\n                vars.reserveDecimals,\\n                vars.baseLTV,\\n                vars.liquidationThreshold,\\n                vars.usageAsCollateralEnabled\\n            ) = core.getPoolConfiguration(pools[poolIdx]);\\n\\n            vars.tokenUnit = 10**vars.reserveDecimals;\\n            vars.poolUnitPrice = LibFacet.getPriceFeed().getAssetPrice(\\n                pools[poolIdx]\\n            );\\n\\n            if (vars.compoundedLiquidityBalance > 0) {\\n                vars.liquidityBalanceETH =\\n                    (vars.poolUnitPrice * vars.compoundedLiquidityBalance) /\\n                    vars.tokenUnit;\\n                /// @dev totalLiquidityBalanceETH is the equivalent asset in US dollars. So 0.5 compoundedLiquidityBalance will yield 750 totalLiquidtiyBalacneETH if price for 1 ETH = 1500\\n                totalLiquidityBalanceETH += vars.liquidityBalanceETH;\\n\\n                if (\\n                    vars.usageAsCollateralEnabled &&\\n                    vars.userUsesReserveAsCollateral\\n                ) {\\n                    totalCollateralBalanceETH += vars.liquidityBalanceETH;\\n                    currentLTV += vars.liquidityBalanceETH * vars.baseLTV;\\n                    currentLiquidationThreshold +=\\n                        vars.liquidityBalanceETH *\\n                        vars.liquidationThreshold;\\n                }\\n            }\\n\\n            if (vars.compoundedBorrowBalance > 0) {\\n                totalBorrowBalanceETH +=\\n                    (vars.poolUnitPrice * vars.compoundedBorrowBalance) /\\n                    vars.tokenUnit;\\n                totalFeesETH +=\\n                    (vars.originationFee * vars.poolUnitPrice) /\\n                    vars.tokenUnit;\\n            }\\n        }\\n\\n        /// TODO: aren't the currentLTV and currentLiquidationThreshold always equal to baseLTV and liquidationThreshold?\\n        currentLTV = totalCollateralBalanceETH > 0\\n            ? currentLTV / totalCollateralBalanceETH\\n            : 0;\\n        currentLiquidationThreshold = totalCollateralBalanceETH > 0\\n            ? currentLiquidationThreshold / totalCollateralBalanceETH\\n            : 0;\\n        healthFactor = calculateHealthFactorFromBalances(\\n            totalCollateralBalanceETH,\\n            totalBorrowBalanceETH,\\n            totalFeesETH,\\n            currentLiquidationThreshold\\n        );\\n        healthFactorBelowThreshold = healthFactor < 1e18;\\n    }\\n\\n    function calculateExpectedVariableBorrowRate(address _pool, uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        (uint256 variableBorrowRate, ) = LendingPoolCore(address(this))\\n            .calculateInterestRates(\\n                pool.providedLiquidity - _amount,\\n                pool.borrowedLiquidity + _amount,\\n                pool.rates.interestRateSlopeBelow,\\n                pool.rates.interestRateSlopeAbove,\\n                pool.rates.baseVariableBorrowRate,\\n                pool.rates.targetUtilisationRate\\n            );\\n        return variableBorrowRate / 10**7;\\n    }\\n\\n    function getUserPoolData(address _pool, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 currentBorrowBalance,\\n            uint256 principalBorrowBalance,\\n            uint256 liquidityRate,\\n            uint256 originationFee,\\n            uint256 variableBorrowIndex,\\n            uint256 lastUpdatedTimestamp,\\n            LibFacet.InterestRateMode borrowRateMode,\\n            bool usageAsCollateralEnabled\\n        )\\n    {\\n        LendingPoolCore core = LendingPoolCore(address(this));\\n        (principalBorrowBalance, currentBorrowBalance, ) = core\\n            .getUserBorrowBalances(_pool, _user);\\n        borrowRateMode = core.getUserCurrentBorrowRateMode(_pool, _user);\\n        liquidityRate = core.getPoolLiquidityRate(_pool);\\n        originationFee = core.getUserOriginationFee(_pool, _user);\\n        variableBorrowIndex = core.getUserVariableBorrowIndex(_pool, _user);\\n        lastUpdatedTimestamp = core.getUserLastUpdatedTimestamp(_pool, _user);\\n        usageAsCollateralEnabled = core.getUserUsePoolAsCollateral(\\n            _pool,\\n            _user\\n        );\\n    }\\n\\n    function getUserRewardShare(address _pool, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 liquidityProvidedByUser = LibFacet\\n            .lpcStorage()\\n            .pools[_pool]\\n            .users[_user]\\n            .liquidityProvided;\\n        if (liquidityProvidedByUser == 0) return 0;\\n\\n        uint256 totalLiquidityProvided = 0;\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        for (uint256 userIdx = 0; userIdx < pool.allUsers.length; userIdx++)\\n            totalLiquidityProvided += pool\\n                .users[pool.allUsers[userIdx]]\\n                .liquidityProvided;\\n\\n        return liquidityProvidedByUser.wadDiv(totalLiquidityProvided);\\n    }\\n\\n    function getAllActivePools() external view returns (address[] memory) {\\n        address[] memory allPools = LibFacet.lpcStorage().allPools;\\n        address[] memory activePools = new address[](allPools.length);\\n        uint256 activePoolIndex = 0;\\n        for (uint256 i = 0; i < allPools.length; i++) {\\n            if (LibFacet.lpcStorage().pools[allPools[i]].isActive)\\n                activePools[activePoolIndex++] = allPools[i];\\n        }\\n\\n        return activePools;\\n    }\\n\\n    function getAllActivePoolAssetNames()\\n        external\\n        view\\n        returns (string[] memory)\\n    {\\n        address[] memory allPools = LibFacet.lpcStorage().allPools;\\n        string[] memory activePools = new string[](allPools.length);\\n        uint256 activePoolIndex = 0;\\n        for (uint256 i = 0; i < allPools.length; i++) {\\n            if (LibFacet.lpcStorage().pools[allPools[i]].isActive)\\n                activePools[activePoolIndex++] = LibFacet\\n                    .lpcStorage()\\n                    .pools[allPools[i]]\\n                    .asset;\\n        }\\n\\n        return activePools;\\n    }\\n\\n    function getPoolDisplayData(address _pool, address _user)\\n        external\\n        view\\n        returns (LibFacet.getPoolDisplayDataLocalVars memory)\\n    {\\n        return\\n            LendingPoolCore(address(this)).getPoolDisplayInformation(\\n                _pool,\\n                _user\\n            );\\n    }\\n\\n    function calculateUserAmountToRepay(address _pool, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (, uint256 compoundedBorrowBalance, ) = LendingPoolCore(address(this))\\n            .getUserBorrowBalances(_pool, _user);\\n        uint256 originationFee = FeeProvider(address(this))\\n            .calculateLoanOriginationFee(compoundedBorrowBalance);\\n\\n        return compoundedBorrowBalance + originationFee;\\n    }\\n\\n    function getPoolLendData(address _pool, address _user)\\n        external\\n        view\\n        returns (\\n            string memory asset,\\n            uint256 depositedLiquidity,\\n            uint256 userDepositedLiquidity,\\n            uint256 userMaxRedeemAmount,\\n            uint256 borrowedLiquidity,\\n            uint256 depositAPY,\\n            uint256 loanToValue,\\n            bool isUsableAsCollateral\\n        )\\n    {\\n        (\\n            asset,\\n            depositedLiquidity,\\n            userDepositedLiquidity,\\n            borrowedLiquidity,\\n            loanToValue,\\n            isUsableAsCollateral\\n        ) = LendingPoolCore(address(this)).getPoolDepositInformation(\\n            _pool,\\n            _user\\n        );\\n        depositAPY = LendingPoolCore(address(this)).calculateUserDepositAPY(\\n            _pool\\n        );\\n        userMaxRedeemAmount = LendingPoolCore(address(this))\\n            .getUserMaxRedeemAmount(_pool, _user);\\n    }\\n\\n    function calculateHealthFactorFromBalances(\\n        uint256 _totalCollateralBalanceETH,\\n        uint256 _totalBorrowBalanceETH,\\n        uint256 _totalFeesETH,\\n        uint256 _currentLiquidationThreshold\\n    ) internal pure returns (uint256) {\\n        if (_totalBorrowBalanceETH == 0) return type(uint256).max;\\n\\n        return\\n            ((_totalCollateralBalanceETH * _currentLiquidationThreshold) / 100)\\n                .wadDiv(_totalBorrowBalanceETH + _totalFeesETH);\\n    }\\n\\n    function calculateAvailableBorrowsETH(address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (\\n            ,\\n            uint256 collateralBalanceETH,\\n            uint256 borrowBalanceETH,\\n            uint256 totalFeesETH,\\n            uint256 LTV,\\n            ,\\n            ,\\n\\n        ) = getUserGlobalData(_user);\\n\\n        return\\n            calculateAvailableBorrowsETHInternal(\\n                collateralBalanceETH,\\n                borrowBalanceETH,\\n                totalFeesETH,\\n                LTV\\n            );\\n    }\\n\\n    function calculateAvailableBorrowsETHInternal(\\n        uint256 _collateralBalanceETH,\\n        uint256 _borrowBalanceETH,\\n        uint256 _totalFeesETH,\\n        uint256 _LTV\\n    ) internal view returns (uint256) {\\n        uint256 availableBorrowsETH = (_collateralBalanceETH * _LTV) / 100;\\n        if (availableBorrowsETH <= _borrowBalanceETH) return 0;\\n\\n        availableBorrowsETH -= _borrowBalanceETH + _totalFeesETH;\\n\\n        uint256 originationFee = FeeProvider(address(this))\\n            .calculateLoanOriginationFee(availableBorrowsETH);\\n        return availableBorrowsETH - originationFee;\\n    }\\n\\n    function calculateCollateralNeededInETH(\\n        address _pool,\\n        uint256 _amount,\\n        uint256 _fee,\\n        uint256 _userCurrentBorrowBalanceETH,\\n        uint256 _userCurrentFeesETH,\\n        uint256 _userCurrentLTV\\n    ) external view returns (uint256 collateralNeededInETH) {\\n        PriceFeed pf = LibFacet.getPriceFeed();\\n\\n        uint256 poolDecimals = LendingPoolCore(address(this)).getPoolDecimals(\\n            _pool\\n        );\\n        uint256 requestedBorrowAmountETH = (pf.getAssetPrice(_pool) *\\n            (_amount + _fee)) / 10**poolDecimals;\\n        collateralNeededInETH =\\n            ((_userCurrentBorrowBalanceETH +\\n                _userCurrentFeesETH +\\n                requestedBorrowAmountETH) * 100) /\\n            _userCurrentLTV;\\n    }\\n\\n    function getPoolAmountInETH(address _pool, uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 decimals = LendingPoolCore(address(this)).getPoolDecimals(\\n            _pool\\n        );\\n        return\\n            (LibFacet.getPriceFeed().getAssetPrice(_pool) * _amount) /\\n            (10**decimals);\\n    }\\n\\n    function getMaxAmountToRepayOnLiquidation(\\n        address _pool,\\n        address _userToLiquidate\\n    ) public view returns (uint256 maxPrincipalAmount) {\\n        (, uint256 compoundedBorrowBalance, ) = LendingPoolCore(address(this))\\n            .getUserBorrowBalances(_pool, _userToLiquidate);\\n        return compoundedBorrowBalance / 2;\\n    }\\n\\n    function calculateAvailableCollateralToLiquidate(\\n        address _principal,\\n        address _collateral,\\n        uint256 _purchaseAmount,\\n        uint256 _userCollateralBalance\\n    ) public view returns (uint256 collateralAmount, uint256 principalAmount) {\\n        PriceFeed pf = LibFacet.getPriceFeed();\\n        uint256 principalPrice = pf.getAssetPrice(_principal);\\n        uint256 collateralPrice = pf.getAssetPrice(_collateral);\\n        uint256 liquidationBonus = LendingPoolCore(address(this))\\n            .getPoolLiquidationBonus(_collateral);\\n        uint256 maxCollateralToLiquidate = ((_purchaseAmount * principalPrice) /\\n            collateralPrice);\\n        maxCollateralToLiquidate +=\\n            (maxCollateralToLiquidate * liquidationBonus) /\\n            100;\\n        if (maxCollateralToLiquidate > _userCollateralBalance) {\\n            collateralAmount = _userCollateralBalance;\\n            principalAmount = ((collateralAmount * collateralPrice) /\\n                principalPrice);\\n            principalAmount -= (principalAmount * liquidationBonus) / 100;\\n        } else {\\n            collateralAmount = maxCollateralToLiquidate;\\n            principalAmount = _purchaseAmount;\\n        }\\n    }\\n\\n    function getUserCollateralAmount(address _pool, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LendingPoolCore(address(this)).getUserCollateralBalance(\\n                _pool,\\n                _user\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc4d06800b79fd883f99d6c44dec1dfaf788c06f12fd3a1f59a99756a6bc460e4\",\"license\":\"No-License\"},\"contracts/lendingpool/FeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"../libraries/WadRayMath.sol\\\";\\n\\ncontract FeeProvider {\\n    using WadRayMath for uint256;\\n\\n    uint256 internal constant originationFeePercentage = 0.0025 * 1e18;\\n\\n    function calculateLoanOriginationFee(uint256 _amount)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return _amount.wadMul(originationFeePercentage);\\n    }\\n}\\n\",\"keccak256\":\"0x365cb4d1455783a5d05b8e1ca78e930be14b795326c9839bb519375d55bf613f\",\"license\":\"No-License\"},\"contracts/lendingpool/LendingPoolCore.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"./DataProvider.sol\\\";\\nimport \\\"../libraries/LibFacet.sol\\\";\\nimport \\\"../libraries/WadRayMath.sol\\\";\\nimport \\\"../mocks/EthMock.sol\\\";\\nimport \\\"../mocks/UsdcMock.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n// @TODO rename _balanceIncrease to something like \\\"accumulatedInterest\\\"\\ncontract LendingPoolCore {\\n    using WadRayMath for uint256;\\n\\n    function getEthValue(address _token, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 loanToValue = LibFacet.lpcStorage().pools[_token].loanToValue;\\n        return ((_amount * loanToValue) / 100);\\n    }\\n\\n    function updateStateOnDeposit(\\n        address _pool,\\n        address _user,\\n        uint256 _amount,\\n        bool _useAsCollateral\\n    ) public {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        updateCumulativeIndexes(pool);\\n        updatePoolInterestRates(pool, _amount, 0);\\n        bool isFirstDeposit = pool.users[_user].liquidityProvided == 0;\\n        pool.providedLiquidity += _amount;\\n        pool.users[_user].liquidityProvided += _amount;\\n        setUserUsePoolAsCollateralInternal(_pool, _user, _useAsCollateral);\\n        if (isFirstDeposit) {\\n            pool.allUsers.push(_user);\\n            initializeUserData(pool.users[_user]);\\n        }\\n    }\\n\\n    function updateStateOnRedeem(\\n        address _pool,\\n        address _user,\\n        uint256 _amount,\\n        bool _userRedeemedEverything\\n    ) public {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        updateCumulativeIndexes(pool);\\n\\n        uint256 liquidityProvided = pool.users[_user].liquidityProvided;\\n        if (_amount > liquidityProvided) {\\n            updatePoolInterestRates(pool, 0, liquidityProvided);\\n            pool.users[_user].liquidityProvided = 0;\\n            pool.providedLiquidity -= liquidityProvided;\\n            pool.rewardsLiquidity -= (_amount - liquidityProvided);\\n        } else {\\n            updatePoolInterestRates(pool, 0, _amount);\\n            pool.providedLiquidity -= _amount;\\n            pool.users[_user].liquidityProvided -= _amount;\\n        }\\n\\n        if (_userRedeemedEverything) {\\n            setUserUsePoolAsCollateralInternal(_pool, _user, false);\\n            pool.users[_user].rates.variableBorrowRate = 0;\\n            pool.users[_user].rates.stableBorrowRate = 0;\\n            pool.users[_user].rates.stableBorrowRate = 0;\\n            pool.users[_user].rates.cumulatedVariableBorrowIndex =\\n                1 *\\n                WadRayMath.RAY;\\n        }\\n    }\\n\\n    function updateStateOnBorrow(\\n        address _pool,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _borrowFee,\\n        LibFacet.InterestRateMode _rateMode\\n    ) public {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        LibFacet.UserPoolData storage user = pool.users[_user];\\n        (\\n            uint256 principalBorrowBalance,\\n            ,\\n            uint256 balanceIncrease\\n        ) = getUserBorrowBalances(_pool, _user);\\n\\n        updatePoolStateOnBorrow(\\n            pool,\\n            _user,\\n            principalBorrowBalance,\\n            balanceIncrease,\\n            _amount,\\n            _rateMode\\n        );\\n\\n        updateUserStateOnBorrow(\\n            pool,\\n            user,\\n            _amount,\\n            balanceIncrease,\\n            _borrowFee,\\n            _rateMode\\n        );\\n\\n        updatePoolInterestRates(pool, 0, _amount);\\n    }\\n\\n    function updateStateOnRepay(\\n        address _pool,\\n        address _user,\\n        uint256 _paybackAmountMinusFee,\\n        uint256 _originationFeeRepaid,\\n        uint256 _balanceIncrease,\\n        bool _repaidWholeLoan\\n    ) external {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n\\n        updatePoolStateOnRepay(\\n            pool,\\n            _pool,\\n            _user,\\n            _paybackAmountMinusFee,\\n            _balanceIncrease\\n        );\\n        updateUserStateOnRepay(\\n            pool,\\n            _user,\\n            _paybackAmountMinusFee,\\n            _originationFeeRepaid,\\n            _balanceIncrease,\\n            _repaidWholeLoan\\n        );\\n\\n        updatePoolInterestRates(pool, _paybackAmountMinusFee, 0);\\n    }\\n\\n    function updateStateOnLiquidationCall(\\n        address _pool,\\n        address _collateral,\\n        address _user,\\n        uint256 _principalAmountToRepay,\\n        uint256 _feeRepayed,\\n        uint256 _collateralAmountToLiquidate,\\n        uint256 _balanceIncrease\\n    ) public {\\n        LibFacet.Pool storage principalPool = LibFacet.lpcStorage().pools[\\n            _pool\\n        ];\\n        LibFacet.Pool storage collateralPool = LibFacet.lpcStorage().pools[\\n            _collateral\\n        ];\\n\\n        updatePrincipalPoolStateOnLiquidationCall(\\n            principalPool,\\n            principalPool.users[_user],\\n            _principalAmountToRepay,\\n            _balanceIncrease\\n        );\\n        updateCumulativeIndexes(collateralPool);\\n        updateUserStateOnLiquidationCall(\\n            principalPool,\\n            collateralPool,\\n            _user,\\n            _principalAmountToRepay,\\n            _feeRepayed,\\n            _balanceIncrease,\\n            _collateralAmountToLiquidate\\n        );\\n        updatePoolInterestRates(principalPool, _principalAmountToRepay, 0);\\n        updatePoolInterestRates(\\n            collateralPool,\\n            0,\\n            _collateralAmountToLiquidate\\n        );\\n    }\\n\\n    function updateUserStateOnLiquidationCall(\\n        LibFacet.Pool storage _pool,\\n        LibFacet.Pool storage _collateral,\\n        address _user,\\n        uint256 _amountRepayed,\\n        uint256 _feeLiquidated,\\n        uint256 _balanceIncrease,\\n        uint256 _collateralToLiquidate\\n    ) internal {\\n        _collateral.users[_user].liquidityProvided -= _collateralToLiquidate;\\n        _pool.users[_user].principalBorrowBalance -=\\n            _amountRepayed -\\n            _balanceIncrease;\\n        _pool.users[_user].originationFee -= _feeLiquidated;\\n        if (\\n            _pool.users[_user].rates.rateMode ==\\n            LibFacet.InterestRateMode.VARIABLE\\n        )\\n            _pool.users[_user].cumulatedVariableBorrowIndex = _pool\\n                .cumulatedVariableBorrowIndex;\\n        _pool.users[_user].lastUpdatedTimestamp = block.timestamp;\\n    }\\n\\n    function updatePrincipalPoolStateOnLiquidationCall(\\n        LibFacet.Pool storage _pool,\\n        LibFacet.UserPoolData storage _user,\\n        uint256 _amountToRepay,\\n        uint256 _balanceIncrease\\n    ) internal {\\n        console.log(_pool.borrowedLiquidity);\\n        console.log(_amountToRepay);\\n        console.log(_balanceIncrease);\\n        _pool.borrowedLiquidity -= _amountToRepay - _balanceIncrease;\\n        updateCumulativeIndexes(_pool);\\n        if (\\n            _user.rates.rateMode == LibFacet.InterestRateMode.STABLE\\n        ) {} else if (\\n            _user.rates.rateMode == LibFacet.InterestRateMode.VARIABLE\\n        ) {\\n            increaseTotalVariableBorrows(_pool, _balanceIncrease);\\n            decreaseTotalVariableBorrows(_pool, _amountToRepay);\\n        }\\n    }\\n\\n    function updatePoolStateOnLiquidationCall(\\n        LibFacet.Pool storage _pool,\\n        uint256 _amount,\\n        uint256 _balanceIncrease,\\n        LibFacet.InterestRateMode _interestMode\\n    ) internal {\\n        updateCumulativeIndexes(_pool);\\n        _pool.providedLiquidity += _balanceIncrease;\\n        if (_interestMode == LibFacet.InterestRateMode.STABLE) {} else if (\\n            _interestMode == LibFacet.InterestRateMode.VARIABLE\\n        ) {\\n            decreaseTotalVariableBorrows(_pool, _amount);\\n        }\\n    }\\n\\n    function updatePoolStateOnRepay(\\n        LibFacet.Pool storage _pool,\\n        address _poolAddress,\\n        address _user,\\n        uint256 _paybackAmountMinusFee,\\n        uint256 _balanceIncrease\\n    ) internal {\\n        updateCumulativeIndexes(_pool);\\n        _pool.rewardsLiquidity += _balanceIncrease;\\n        _pool.borrowedLiquidity -= _paybackAmountMinusFee - _balanceIncrease;\\n\\n        LibFacet.InterestRateMode borrowMode = getUserCurrentBorrowRateMode(\\n            _poolAddress,\\n            _user\\n        );\\n        if (borrowMode == LibFacet.InterestRateMode.VARIABLE) {\\n            increaseTotalVariableBorrows(_pool, _balanceIncrease);\\n            decreaseTotalVariableBorrows(_pool, _paybackAmountMinusFee);\\n        } else {}\\n    }\\n\\n    function updateUserStateOnRepay(\\n        LibFacet.Pool storage _pool,\\n        address _user,\\n        uint256 _paybackAmountMinusFee,\\n        uint256 _originationFeeRepaid,\\n        uint256 _balanceIncrease,\\n        bool _repaidWholeLoan\\n    ) internal {\\n        LibFacet.UserPoolData storage user = _pool.users[_user];\\n        user.principalBorrowBalance -=\\n            _paybackAmountMinusFee -\\n            _balanceIncrease;\\n        user.cumulatedVariableBorrowIndex = _pool.cumulatedVariableBorrowIndex;\\n        if (_repaidWholeLoan) {\\n            user.rates.stableBorrowRate = 0;\\n            user.rates.variableBorrowRate = 0;\\n        }\\n        user.originationFee = user.originationFee - _originationFeeRepaid;\\n        user.lastUpdatedTimestamp = block.timestamp;\\n    }\\n\\n    function updatePoolStateOnBorrow(\\n        LibFacet.Pool storage _pool,\\n        address _user,\\n        uint256 _principalBorrowBalance,\\n        uint256 _balanceIncrease,\\n        uint256 _amountBorrowed,\\n        LibFacet.InterestRateMode _rateMode\\n    ) internal {\\n        updateCumulativeIndexes(_pool);\\n        updatePoolTotalBorrows(\\n            _pool,\\n            _user,\\n            _principalBorrowBalance,\\n            _balanceIncrease,\\n            _amountBorrowed,\\n            _rateMode\\n        );\\n        _pool.borrowedLiquidity += _amountBorrowed;\\n    }\\n\\n    // TODO: ADD previous values of indexes to the Pool and UserPoolData structs.\\n    function updateUserStateOnBorrow(\\n        LibFacet.Pool storage _pool,\\n        LibFacet.UserPoolData storage _user,\\n        uint256 _amountBorrowed,\\n        uint256 _balanceIncrease,\\n        uint256 _fee,\\n        LibFacet.InterestRateMode _rateMode\\n    ) internal {\\n        if (_rateMode == LibFacet.InterestRateMode.STABLE) {} else if (\\n            _rateMode == LibFacet.InterestRateMode.VARIABLE\\n        ) {\\n            _user.rates.stableBorrowRate = 0;\\n            _user.cumulatedVariableBorrowIndex = _pool\\n                .cumulatedVariableBorrowIndex;\\n        } else {\\n            revert(\\\"Invalid borrow mode.\\\");\\n        }\\n\\n        _user.principalBorrowBalance += _balanceIncrease + _amountBorrowed;\\n        _user.originationFee = _user.originationFee + _fee;\\n        _user.lastUpdatedTimestamp = block.timestamp;\\n    }\\n\\n    function updatePoolTotalBorrows(\\n        LibFacet.Pool storage _pool,\\n        address _user,\\n        uint256 _principalBorrowBalance,\\n        uint256 _balanceIncrease,\\n        uint256 _amountBorrowed,\\n        LibFacet.InterestRateMode _newRateMode\\n    ) internal {\\n        LibFacet.InterestRateMode previousRateMode = getUserCurrentBorrowRateMode(\\n                _pool.users[_user]\\n            );\\n        if (previousRateMode == LibFacet.InterestRateMode.STABLE) {} else if (\\n            previousRateMode == LibFacet.InterestRateMode.VARIABLE\\n        ) {\\n            decreaseTotalVariableBorrows(_pool, _principalBorrowBalance);\\n        }\\n\\n        uint256 newPrincipalAmount = _principalBorrowBalance +\\n            _amountBorrowed +\\n            _balanceIncrease;\\n        if (_newRateMode == LibFacet.InterestRateMode.STABLE) {} else if (\\n            _newRateMode == LibFacet.InterestRateMode.VARIABLE\\n        ) {\\n            increaseTotalVariableBorrows(_pool, newPrincipalAmount);\\n        } else {\\n            revert(\\\"Invalid new borrow rate mode.\\\");\\n        }\\n    }\\n\\n    function decreaseTotalVariableBorrows(\\n        LibFacet.Pool storage _pool,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            _pool.variableBorrowLiquidity >= _amount,\\n            \\\"The amount that is being subtracted from the variable borrows is incorrect.\\\"\\n        );\\n        _pool.variableBorrowLiquidity -= _amount;\\n    }\\n\\n    function increaseTotalVariableBorrows(\\n        LibFacet.Pool storage _pool,\\n        uint256 _amount\\n    ) internal {\\n        _pool.variableBorrowLiquidity += _amount;\\n    }\\n\\n    function getPoolLiquidityRate(address _pool) public view returns (uint256) {\\n        return LibFacet.lpcStorage().pools[_pool].rates.currentLiquidityRate;\\n    }\\n\\n    function getUserCurrentBorrowRateMode(LibFacet.UserPoolData memory _user)\\n        internal\\n        pure\\n        returns (LibFacet.InterestRateMode)\\n    {\\n        if (_user.principalBorrowBalance == 0)\\n            return LibFacet.InterestRateMode.NONE;\\n\\n        return\\n            _user.rates.stableBorrowRate > 0\\n                ? LibFacet.InterestRateMode.STABLE\\n                : LibFacet.InterestRateMode.VARIABLE;\\n    }\\n\\n    function updateCumulativeIndexes(LibFacet.Pool storage _pool) internal {\\n        if (_pool.borrowedLiquidity > 0) {\\n            _pool.cumulatedLiquidityIndex = calculateLinearInterest(\\n                _pool.rates.currentLiquidityRate,\\n                _pool.lastUpdatedTimestamp\\n            ).rayMul(_pool.cumulatedLiquidityIndex);\\n            _pool.cumulatedVariableBorrowIndex = calculateCompoundedInterest(\\n                _pool.rates.variableBorrowRate,\\n                LibFacet.SECONDS_IN_A_YEAR,\\n                block.timestamp,\\n                _pool.lastUpdatedTimestamp\\n            ).rayMul(_pool.cumulatedVariableBorrowIndex);\\n        }\\n    }\\n\\n    function updatePoolInterestRates(\\n        LibFacet.Pool storage _pool,\\n        uint256 _liquidityAdded,\\n        uint256 _liquidityTaken\\n    ) internal {\\n        (\\n            _pool.rates.variableBorrowRate,\\n            _pool.rates.currentLiquidityRate\\n        ) = calculateInterestRates(\\n            _pool.providedLiquidity + _liquidityAdded - _liquidityTaken,\\n            _pool.variableBorrowLiquidity,\\n            _pool.rates.interestRateSlopeBelow,\\n            _pool.rates.interestRateSlopeAbove,\\n            _pool.rates.baseVariableBorrowRate,\\n            _pool.rates.targetUtilisationRate\\n        );\\n        _pool.rates.overallBorrowRate = _pool.rates.variableBorrowRate;\\n        _pool.lastUpdatedTimestamp = block.timestamp;\\n    }\\n\\n    function calculateInterestRates(\\n        uint256 _totalLiquidity,\\n        uint256 _totalVariableBorrows,\\n        uint256 _variableRateSlope1,\\n        uint256 _variableRateSlope2,\\n        uint256 _baseVariableBorrowRate,\\n        uint256 _optimalUtilizationRate\\n    )\\n        public\\n        pure\\n        returns (\\n            uint256 currentVariableBorrowRate,\\n            uint256 currentLiquidityRate\\n        )\\n    {\\n        uint256 totalBorrows = _totalVariableBorrows; /// @dev + totalStableBorrows\\n        uint256 utilizationRate = (_totalLiquidity == 0 && totalBorrows == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(_totalLiquidity + totalBorrows);\\n\\n        if (utilizationRate > _optimalUtilizationRate) {\\n            uint256 excessUtilizationRateRatio = (utilizationRate -\\n                _optimalUtilizationRate).rayDiv(\\n                    WadRayMath.RAY - _optimalUtilizationRate\\n                );\\n            currentVariableBorrowRate =\\n                _baseVariableBorrowRate +\\n                _variableRateSlope1 +\\n                (_variableRateSlope2.rayMul(excessUtilizationRateRatio));\\n        } else {\\n            currentVariableBorrowRate =\\n                _baseVariableBorrowRate +\\n                (\\n                    utilizationRate.rayDiv(_optimalUtilizationRate).rayMul(\\n                        _variableRateSlope1\\n                    )\\n                );\\n        }\\n        uint256 overallBorrowRate = calculateOverallBorrowRate(\\n            _totalVariableBorrows,\\n            currentVariableBorrowRate\\n        );\\n        currentLiquidityRate = overallBorrowRate.rayMul(utilizationRate);\\n    }\\n\\n    function calculateOverallBorrowRate(\\n        uint256 _totalVariableBorrows,\\n        uint256 _currentVariableBorrowRate\\n    ) internal pure returns (uint256) {\\n        uint256 totalBorrows = _totalVariableBorrows; /// TODO: + _totalStableBorrows\\n        if (totalBorrows == 0) return 0;\\n\\n        uint256 weightedVariableRate = _totalVariableBorrows.wadToRay().rayMul(\\n            _currentVariableBorrowRate\\n        );\\n\\n        return weightedVariableRate.rayDiv(totalBorrows.wadToRay());\\n    }\\n\\n    function getPoolLiquidationBonus(address _pool)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return LibFacet.lpcStorage().pools[_pool].liquidationBonus;\\n    }\\n\\n    function getUserBorrowBalances(address _pool, address _user)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        LibFacet.UserPoolData storage user = pool.users[_user];\\n        if (user.principalBorrowBalance == 0) return (0, 0, 0);\\n\\n        uint256 compoundedBalance = getCompoundedBorrowBalance(user, pool);\\n        return (\\n            user.principalBorrowBalance,\\n            compoundedBalance,\\n            compoundedBalance - user.principalBorrowBalance\\n        );\\n    }\\n\\n    function getUserOriginationFee(address _pool, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return LibFacet.lpcStorage().pools[_pool].users[_user].originationFee;\\n    }\\n\\n    function calculateCompoundedInterest(\\n        uint256 _variableBorrowRate,\\n        uint256 _secondsInAYear,\\n        uint256 _timestamp,\\n        uint256 _lastUpdatedTimestamp\\n    ) public pure returns (uint256) {\\n        uint256 ratePerSecond = _variableBorrowRate / _secondsInAYear;\\n        return\\n            (WadRayMath.RAY + ratePerSecond).rayPow(\\n                _timestamp - _lastUpdatedTimestamp\\n            );\\n    }\\n\\n    /// @dev calculates interest using linear interest rate formula\\n    function calculateLinearInterest(\\n        uint256 _currentLiquidityRate,\\n        uint256 _lastUpdatedTimestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = calculateTimeDelta(\\n            block.timestamp,\\n            _lastUpdatedTimestamp,\\n            LibFacet.SECONDS_IN_A_YEAR\\n        );\\n        return _currentLiquidityRate.rayMul(timeDelta) + WadRayMath.RAY;\\n    }\\n\\n    function calculateTimeDelta(\\n        uint256 _timestamp,\\n        uint256 _lastUpdatedTimestamp,\\n        uint256 _secondsInAYear\\n    ) internal pure returns (uint256) {\\n        return (_timestamp - _lastUpdatedTimestamp) / _secondsInAYear;\\n    }\\n\\n    function getCompoundedBorrowBalance(\\n        LibFacet.UserPoolData storage _user,\\n        LibFacet.Pool storage _pool\\n    ) internal view returns (uint256) {\\n        if (_user.principalBorrowBalance == 0) return 0;\\n\\n        uint256 principalBorrowBalance = _user\\n            .principalBorrowBalance\\n            .wadToRay();\\n        uint256 compoundedBalance = 0;\\n        uint256 cumulatedInterest = 0;\\n\\n        if (_user.rates.stableBorrowRate > 0) {} else {\\n            cumulatedInterest = calculateCompoundedInterest(\\n                _pool.rates.variableBorrowRate,\\n                LibFacet.SECONDS_IN_A_YEAR,\\n                block.timestamp,\\n                _pool.lastUpdatedTimestamp\\n            ).rayMul(_pool.cumulatedVariableBorrowIndex).rayDiv(\\n                    _user.cumulatedVariableBorrowIndex\\n                );\\n        }\\n\\n        compoundedBalance = principalBorrowBalance\\n            .rayMul(cumulatedInterest)\\n            .rayToWad();\\n\\n        return compoundedBalance;\\n    }\\n\\n    function getUserVariableBorrowIndex(address _pool, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LibFacet\\n                .lpcStorage()\\n                .pools[_pool]\\n                .users[_user]\\n                .rates\\n                .variableBorrowRate;\\n    }\\n\\n    function getUserUsePoolAsCollateral(address _pool, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return LibFacet.lpcStorage().pools[_pool].users[_user].useAsCollateral;\\n    }\\n\\n    function getUserCurrentBorrowRate(\\n        LibFacet.Pool storage _pool,\\n        address _user\\n    ) internal view returns (uint256) {\\n        LibFacet.InterestRateMode rateMode = getUserCurrentBorrowRateMode(\\n            _pool.users[_user]\\n        );\\n\\n        if (rateMode == LibFacet.InterestRateMode.NONE) return 0;\\n\\n        return\\n            rateMode == LibFacet.InterestRateMode.STABLE\\n                ? 0\\n                : _pool.rates.variableBorrowRate;\\n    }\\n\\n    function getUserCurrentBorrowRateMode(address _pool, address _user)\\n        public\\n        view\\n        returns (LibFacet.InterestRateMode)\\n    {\\n        return LibFacet.lpcStorage().pools[_pool].users[_user].rates.rateMode;\\n    }\\n\\n    function getUserLastUpdatedTimestamp(address _pool, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LibFacet\\n                .lpcStorage()\\n                .pools[_pool]\\n                .users[_user]\\n                .lastUpdatedTimestamp;\\n    }\\n\\n    function getUserBasicPoolData(address _pool, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 compoundedLiquidityBalance,\\n            uint256 compoundedBorrowBalance,\\n            uint256 originationFee,\\n            bool userUsesPoolAsCollateral\\n        )\\n    {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        /// Q: How to compound the deposited balance? Don't return just the 'principal' amount.\\n        /// A: Store the compounded interest from loans and distribute it amongst the depositors based on their share.\\n        uint256 assetBalance = pool.users[_user].liquidityProvided;\\n        if (pool.users[_user].principalBorrowBalance == 0)\\n            return (assetBalance, 0, 0, pool.users[_user].useAsCollateral);\\n\\n        return (\\n            assetBalance,\\n            getCompoundedBorrowBalance(pool.users[_user], pool),\\n            pool.users[_user].originationFee,\\n            pool.users[_user].useAsCollateral\\n        );\\n    }\\n\\n    function getUserCumulatedRewards(\\n        address _pool,\\n        address _user,\\n        uint256 _totalRewards\\n    ) public view returns (uint256) {\\n        uint256 userShare = DataProvider(address(this)).getUserRewardShare(\\n            _pool,\\n            _user\\n        );\\n\\n        return (_totalRewards * userShare) / 10**18;\\n    }\\n\\n    function getPoolDepositInformation(address _pool, address _user)\\n        public\\n        view\\n        returns (\\n            string memory asset,\\n            uint256 depositedLiquidity,\\n            uint256 userDepositedLiquidity,\\n            uint256 borrowedLiquidity,\\n            uint256 loanToValue,\\n            bool isUsableAsCollateral\\n        )\\n    {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        return (\\n            pool.asset,\\n            pool.providedLiquidity,\\n            pool.users[_user].liquidityProvided,\\n            pool.borrowedLiquidity,\\n            pool.loanToValue,\\n            pool.isUsableAsCollateral\\n        );\\n    }\\n\\n    function getPoolDisplayInformation(address _pool, address _user)\\n        public\\n        view\\n        returns (LibFacet.getPoolDisplayDataLocalVars memory)\\n    {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        return\\n            LibFacet.getPoolDisplayDataLocalVars(\\n                pool.asset,\\n                pool.loanToValue,\\n                pool.liquidationThreshold,\\n                pool.liquidationBonus,\\n                pool.providedLiquidity,\\n                pool.borrowedLiquidity,\\n                pool.users[_user].principalBorrowBalance,\\n                DataProvider(address(this)).calculateUserAmountToRepay(\\n                    _pool,\\n                    _user\\n                ),\\n                pool.isBorrowingEnabled,\\n                pool.isUsableAsCollateral\\n            );\\n    }\\n\\n    function getPoolConfiguration(address _pool)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        return (\\n            pool.decimals,\\n            pool.baseLTV,\\n            pool.liquidationThreshold,\\n            pool.isUsableAsCollateral\\n        );\\n    }\\n\\n    function getPoolDecimals(address _pool) public view returns (uint256) {\\n        return LibFacet.lpcStorage().pools[_pool].decimals;\\n    }\\n\\n    function getUserMaxRedeemAmount(address _pool, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            getUserCumulatedRewards(\\n                _pool,\\n                _user,\\n                LibFacet.lpcStorage().pools[_pool].rewardsLiquidity\\n            ) +\\n            LibFacet.lpcStorage().pools[_pool].users[_user].liquidityProvided;\\n    }\\n\\n    function getUserCollateralBalance(address _pool, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LibFacet.lpcStorage().pools[_pool].users[_user].useAsCollateral\\n                ? LibFacet\\n                    .lpcStorage()\\n                    .pools[_pool]\\n                    .users[_user]\\n                    .liquidityProvided\\n                : 0;\\n    }\\n\\n    function getPoolCumulatedRewards(address _pool)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return LibFacet.lpcStorage().pools[_pool].rewardsLiquidity;\\n    }\\n\\n    function getPoolAvailableLiquidity(address _pool)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LibFacet.lpcStorage().pools[_pool].providedLiquidity +\\n            LibFacet.lpcStorage().pools[_pool].rewardsLiquidity -\\n            LibFacet.lpcStorage().pools[_pool].borrowedLiquidity;\\n    }\\n\\n    function calculateUserDepositAPY(address _pool)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        if (pool.providedLiquidity == 0) return 0;\\n\\n        uint256 oneYearAhead = pool.lastUpdatedTimestamp + 365 days;\\n        uint256 cumulatedInterest = LendingPoolCore(address(this))\\n            .calculateCompoundedInterest(\\n                pool.rates.variableBorrowRate,\\n                LibFacet.SECONDS_IN_A_YEAR,\\n                oneYearAhead,\\n                pool.lastUpdatedTimestamp\\n            )\\n            .rayMul(pool.cumulatedVariableBorrowIndex);\\n        uint256 compoundedInterest = pool\\n            .borrowedLiquidity\\n            .wadToRay()\\n            .rayMul(cumulatedInterest)\\n            .rayToWad();\\n        uint256 cumulatedValue = compoundedInterest - pool.borrowedLiquidity;\\n\\n        return\\n            (pool.providedLiquidity + cumulatedValue).wadDiv(\\n                pool.providedLiquidity\\n            ) - WadRayMath.WAD;\\n    }\\n\\n    function isPoolBorrowingEnabled(address _pool) public view returns (bool) {\\n        return LibFacet.lpcStorage().pools[_pool].isBorrowingEnabled;\\n    }\\n\\n    function isPoolUsageAsCollateralEnabled(address _pool)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return LibFacet.lpcStorage().pools[_pool].isUsableAsCollateral;\\n    }\\n\\n    function setUserUsePoolAsCollateralInternal(\\n        address _pool,\\n        address _user,\\n        bool _useAsCollateral\\n    ) public {\\n        LibFacet\\n            .lpcStorage()\\n            .pools[_pool]\\n            .users[_user]\\n            .useAsCollateral = _useAsCollateral;\\n    }\\n\\n    function initializeUserData(LibFacet.UserPoolData storage _user) internal {\\n        _user.cumulatedVariableBorrowIndex = WadRayMath.RAY;\\n        _user.cumulatedVariableBorrowIndex = WadRayMath.RAY;\\n    }\\n\\n    function transferToPool(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) public payable {\\n        if (_pool == LibFacet.facetStorage().ethAddress) {\\n            (bool success, ) = _pool.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"Error while sending ETH.\\\");\\n        } else {\\n            bool success = ERC20(_pool).transferFrom(_user, _pool, _amount);\\n            require(success, \\\"Error while sending ERC20 tokens to pool.\\\");\\n        }\\n    }\\n\\n    function transferToUser(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) public {\\n        if (_pool == LibFacet.facetStorage().ethAddress) {\\n            EthMock(payable(_pool)).transferEthToUser(_user, _amount);\\n        } else {\\n            UsdcMock(_pool).customApprove(\\n                _pool,\\n                LibFacet.facetStorage().diamondAddress,\\n                _amount\\n            );\\n            bool success = ERC20(_pool).transferFrom(_pool, _user, _amount);\\n            require(success, \\\"Error on sending ERC20 to user.\\\");\\n        }\\n    }\\n\\n    function transferToFeeCollector(\\n        address _token,\\n        address _user,\\n        uint256 _amount\\n    ) public payable {\\n        address feeProvider = LibFacet.facetStorage().feeProviderAddress;\\n        if (_token != LibFacet.facetStorage().ethAddress) {\\n            bool success = ERC20(_token).transferFrom(\\n                _user,\\n                feeProvider,\\n                _amount\\n            );\\n            require(success, \\\"Error on sending ERC20 tokens to fee collector.\\\");\\n        } else {\\n            (bool result, ) = feeProvider.call{value: _amount}(\\\"\\\");\\n            require(result, \\\"Transfer of ETH failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b96e2221a608a49c961b6b6c217974a0f3a848983b571c4bc84f00de7866d3b\",\"license\":\"No-License\"},\"contracts/libraries/LibFacet.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"../lendingpool/LendingPoolCore.sol\\\";\\nimport \\\"../lendingpool/DataProvider.sol\\\";\\nimport \\\"../lendingpool/FeeProvider.sol\\\";\\nimport \\\"../mocks/PriceFeed.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibFacet {\\n    uint256 internal constant SECONDS_IN_A_YEAR = 365 days;\\n    uint256 internal constant RATE_MULTIPLIER = 10**8;\\n    bytes32 internal constant LENDING_POOL_CORE_STORAGE_POSITION =\\n        keccak256(\\\"diamonds.standart.lending.pool.core.storage\\\");\\n    bytes32 internal constant FACET_STORAGE_POSITION =\\n        keccak256(\\\"diamonds.standart.facet.storage\\\");\\n\\n    // user data tied to a specific pool\\n    struct UserPoolData {\\n        uint256 liquidityProvided;\\n        uint256 principalBorrowBalance;\\n        uint256 compoundedBorrowBalance;\\n        uint256 cumulatedVariableBorrowIndex;\\n        uint256 lastCumulatedVariableBorrowIndex;\\n        uint256 collateralETHBalance;\\n        uint256 liquidationThreshold;\\n        uint256 originationFee;\\n        uint256 lastUpdatedTimestamp;\\n        bool useAsCollateral;\\n        UserInterestRate rates;\\n    }\\n\\n    struct Pool {\\n        string asset;\\n        uint256 decimals;\\n        uint256 providedLiquidity;\\n        uint256 borrowedLiquidity;\\n        uint256 rewardsLiquidity;\\n        uint256 variableBorrowLiquidity;\\n        uint256 cumulatedLiquidityIndex; // interest cumulated by the reserve during the time interval Dt\\n        uint256 reserveNormalizedIncome; // Ongoing interest cumulated by the reserve\\n        uint256 cumulatedVariableBorrowIndex;\\n        uint256 baseLTV;\\n        uint256 loanToValue;\\n        uint256 liquidationThreshold;\\n        uint256 liquidationBonus; // represented in percentage\\n        uint256 lastUpdatedTimestamp;\\n        bool isBorrowingEnabled;\\n        bool isUsableAsCollateral;\\n        bool isActive;\\n        bool isFreezed; // only allow repays and redeems, but not deposits, new borrowings or rate swap.\\n        InterestRate rates;\\n        address[] allUsers;\\n        mapping(address => UserPoolData) users;\\n    }\\n\\n    struct LPCStorage {\\n        mapping(address => Pool) pools;\\n        address[] allPools;\\n    }\\n\\n    struct FacetStorage {\\n        address ethAddress;\\n        address lpcAddress;\\n        address dataProviderAddress;\\n        address priceFeedAddress;\\n        address feeProviderAddress;\\n        address diamondAddress;\\n    }\\n\\n    struct InterestRate {\\n        InterestRateMode rateMode;\\n        uint256 targetUtilisationRate;\\n        uint256 interestRateSlopeBelow; // constant representing the scaling of the interest rate vs the utilization.\\n        uint256 interestRateSlopeAbove;\\n        uint256 baseVariableBorrowRate; // constant for totalBorrows = 0. Expressed in ray\\n        uint256 variableBorrowRate;\\n        uint256 overallBorrowRate; // (VariableBorrowRate * TotalVariableBorrows) / totalBorrows\\n        uint256 currentLiquidityRate; // overallBorrowRate * utilizationRate\\n    }\\n\\n    struct UserInterestRate {\\n        InterestRateMode rateMode;\\n        uint256 variableBorrowRate;\\n        uint256 stableBorrowRate;\\n        uint256 cumulatedVariableBorrowIndex;\\n    }\\n\\n    struct getPoolDisplayDataLocalVars {\\n        string asset;\\n        uint256 loanToValue;\\n        uint256 liquidationThreshold;\\n        uint256 liquidationBonus;\\n        uint256 depositedLiquidity;\\n        uint256 borrowedLiquidity;\\n        uint256 userBorrowedLiquidity;\\n        uint256 userRepayAmount;\\n        bool isBorrowingEnabled;\\n        bool isUsableAsCollateral;\\n    }\\n\\n    enum TokenVolatility {\\n        LOW,\\n        HIGH\\n    }\\n\\n    enum InterestRateMode {\\n        VARIABLE,\\n        STABLE,\\n        NONE\\n    }\\n\\n    function lpcStorage() internal pure returns (LPCStorage storage lpcs) {\\n        bytes32 position = LENDING_POOL_CORE_STORAGE_POSITION;\\n        assembly {\\n            lpcs.slot := position\\n        }\\n    }\\n\\n    function facetStorage() internal pure returns (FacetStorage storage fs) {\\n        bytes32 position = FACET_STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    function getDataProvider() internal view returns (DataProvider) {\\n        return DataProvider(facetStorage().dataProviderAddress);\\n    }\\n\\n    function getFeeProvider() internal view returns (FeeProvider) {\\n        return FeeProvider(facetStorage().feeProviderAddress);\\n    }\\n\\n    function getPriceFeed() internal view returns (PriceFeed) {\\n        return PriceFeed(facetStorage().priceFeedAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf37601451eba126ff5ad0aac5c53901e347802fe9182a75f3175e84f7291c6f0\",\"license\":\"No-License\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            // Equivalent to require(x == 0 || (x * y) / x == y)\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74d16d29afcc5dcb605b47389af1535fedacd849714a76cdbac9700295594746\",\"license\":\"BUSL-1.1\"},\"contracts/mocks/EthMock.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"../libraries/LibFacet.sol\\\";\\n\\ncontract EthMock {\\n    function transferEthToUser(address _user, uint256 _amount) public payable {\\n        (bool success, ) = _user.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Error while sending ETH.\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xeaef772dbf936293c91daf1c7162209aaa53a0942156732f49ec9b137be8f64d\",\"license\":\"No-License\"},\"contracts/mocks/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract PriceFeed {\\n    address internal owner;\\n    mapping(address => AggregatorV3Interface) internal priceFeeds;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only the owner of this smart contract can execute this action.\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function addAssetOracle(address _asset, address _oracle)\\n        external\\n        onlyOwner\\n    {\\n        priceFeeds[_asset] = AggregatorV3Interface(_oracle);\\n    }\\n\\n    function getAssetPrice(address _asset) external view returns (uint256) {\\n        (, int256 price, , , ) = priceFeeds[_asset].latestRoundData();\\n        return uint256(price);\\n    }\\n}\\n\",\"keccak256\":\"0xebad21912db523c5e74ae2322211a33f5057f130fd579428e8317b50a5c69f84\",\"license\":\"No-License\"},\"contracts/mocks/UsdcMock.sol\":{\"content\":\"pragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract UsdcMock is ERC20 {\\n    constructor(address _to) ERC20(\\\"UsdcMock\\\", \\\"USDCM\\\") {\\n        _mint(_to, 10000 ether);\\n    }\\n\\n    function customApprove(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) public {\\n        _approve(_owner, _spender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xdf079725f583d609e2939715315faab77c1c7c13736943cbcab4f6e14364bcf6\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061224c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c806312737c33146100ca5780631e732ca3146100f0578063257fd1af14610103578063430d0b5b14610116578063491db4a21461013d5780634b1f6d531461016457806352791cc31461018c578063623b343b146101ac578063840794bc146101bf578063981c36fa146101d25780639872cb19146101e5578063cf6bd206146101f8578063d0dba4c81461020d578063d5cd7d2014610220578063e1fa02ba14610235575b600080fd5b6100dd6100d83660046119d3565b610285565b6040519081526020015b60405180910390f35b6100dd6100fe366004611a1d565b6103cf565b6100dd610111366004611a50565b6104b9565b610129610124366004611a1d565b6104ec565b6040516100e7989796959493929190611abb565b61015061014b366004611a1d565b610656565b6040516100e7989796959493929190611b08565b610177610172366004611b6b565b610994565b604080519283526020830191909152016100e7565b61019f61019a366004611a1d565b610b88565b6040516100e79190611bad565b6100dd6101ba366004611a1d565b610c53565b6100dd6101cd366004611c40565b610cbc565b6100dd6101e0366004611a1d565b610dad565b6100dd6101f3366004611c40565b610e30565b610200610f2f565b6040516100e79190611c6a565b6100dd61021b366004611a1d565b61116c565b610228611250565b6040516100e79190611ccc565b610248610243366004611a50565b6113d6565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016100e7565b60008061029061182c565b60405163d79357fb60e01b8152909150600090309063d79357fb906102b9908c90600401611d19565b602060405180830381865afa1580156102d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fa9190611d2d565b9050600061030982600a611e40565b610313898b611e4c565b60405163b3596f0760e01b81526001600160a01b0386169063b3596f079061033f908f90600401611d19565b602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103809190611d2d565b61038a9190611e5f565b6103949190611e76565b905084816103a2888a611e4c565b6103ac9190611e4c565b6103b7906064611e5f565b6103c19190611e76565b9a9950505050505050505050565b604051639fb8afcd60e01b815260009081903090639fb8afcd906103f99087908790600401611e98565b606060405180830381865afa158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043a9190611eb2565b5060405163249bbe9160e01b81526004810182905290925060009150309063249bbe9190602401602060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a29190611d2d565b90506104ae8183611e4c565b925050505b92915050565b60008060008060006104ca866113d6565b5050509450945094509450506104e28484848461185a565b9695505050505050565b60606000806000806000806000306001600160a01b031663517a55d78b8b6040518363ffffffff1660e01b8152600401610527929190611e98565b600060405180830381865afa158015610544573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056c9190810190611fac565b60405162b6c59160e31b8152959d50939b5091995096509350915030906305b62c889061059d908d90600401611d19565b602060405180830381865afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190611d2d565b60405163a99901a360e01b8152909350309063a99901a390610606908d908d90600401611e98565b602060405180830381865afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190611d2d565b94509295985092959890939650565b6000806000806000806000806000309050806001600160a01b0316639fb8afcd8c8c6040518363ffffffff1660e01b8152600401610695929190611e98565b606060405180830381865afa1580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190611eb2565b50604051631ca19f1960e01b8152909a509098506001600160a01b03821690631ca19f199061070b908e908e90600401611e98565b602060405180830381865afa158015610728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074c919061201e565b6040516338c06fbf60e21b81529093506001600160a01b0382169063e301befc9061077b908e90600401611d19565b602060405180830381865afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc9190611d2d565b604051633faacc6b60e21b81529097506001600160a01b0382169063feab31ac906107ed908e908e90600401611e98565b602060405180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190611d2d565b6040516359e7d6e560e01b81529096506001600160a01b038216906359e7d6e59061085f908e908e90600401611e98565b602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190611d2d565b604051632da1297d60e01b81529095506001600160a01b03821690632da1297d906108d1908e908e90600401611e98565b602060405180830381865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109129190611d2d565b6040516328ff386160e11b81529094506001600160a01b038216906351fe70c290610943908e908e90600401611e98565b602060405180830381865afa158015610960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610984919061203f565b9150509295985092959890939650565b60008060006109a161182c565b90506000816001600160a01b031663b3596f07896040518263ffffffff1660e01b81526004016109d19190611d19565b602060405180830381865afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a129190611d2d565b90506000826001600160a01b031663b3596f07896040518263ffffffff1660e01b8152600401610a429190611d19565b602060405180830381865afa158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a839190611d2d565b6040516346451e8560e01b815290915060009030906346451e8590610aac908c90600401611d19565b602060405180830381865afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190611d2d565b9050600082610afc858b611e5f565b610b069190611e76565b90506064610b148383611e5f565b610b1e9190611e76565b610b289082611e4c565b905087811115610b735787965083610b408489611e5f565b610b4a9190611e76565b95506064610b588388611e5f565b610b629190611e76565b610b6c908761205a565b9550610b7a565b8096508895505b505050505094509492505050565b610be260405180610140016040528060608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60405163f64619b360e01b8152309063f64619b390610c079086908690600401611e98565b600060405180830381865afa158015610c24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4c919081019061206d565b9392505050565b60405163f2ba567760e01b8152600090309063f2ba567790610c7b9086908690600401611e98565b602060405180830381865afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c9190611d2d565b600080610cc7611917565b6001600160a01b03851660009081526020919091526040812060028101549092503090638f88552890610cfb90879061205a565b868560030154610d0b9190611e4c565b601186015460128701546013880154601089015460405160e088901b6001600160e01b03191681526004810196909652602486019490945260448501929092526064840152608483015260a482015260c4016040805180830381865afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9d919061214a565b5090506104ae6298968082611e76565b604051639fb8afcd60e01b815260009081903090639fb8afcd90610dd79087908790600401611e98565b606060405180830381865afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190611eb2565b509150610e289050600282611e76565b949350505050565b60405163d79357fb60e01b81526000908190309063d79357fb90610e58908790600401611d19565b602060405180830381865afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e999190611d2d565b9050610ea681600a611e40565b83610eaf61182c565b6001600160a01b031663b3596f07876040518263ffffffff1660e01b8152600401610eda9190611d19565b602060405180830381865afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190611d2d565b610f259190611e5f565b610e289190611e76565b60606000610f3b611917565b600101805480602002602001604051908101604052809291908181526020018280548015610f9257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f74575b50505050509050600081516001600160401b03811115610fb457610fb4611ee0565b604051908082528060200260200182016040528015610fe757816020015b6060815260200190600190039081610fd25790505b5090506000805b835181101561116357610fff611917565b60000160008583815181106110165761101661216e565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600e0160029054906101000a900460ff16156111515761105c611917565b60000160008583815181106110735761107361216e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000180546110a990612184565b80601f01602080910402602001604051908101604052809291908181526020018280546110d590612184565b80156111225780601f106110f757610100808354040283529160200191611122565b820191906000526020600020905b81548152906001019060200180831161110557829003601f168201915b5050505050838380611133906121be565b9450815181106111455761114561216e565b60200260200101819052505b8061115b816121be565b915050610fee565b50909392505050565b600080611177611917565b6001600160a01b038086166000908152602092835260408082209287168252601890920190925281205491508190036111b45760009150506104b3565b6000806111bf611917565b6001600160a01b03871660009081526020919091526040812091505b6017820154811015611245578160180160008360170183815481106112025761120261216e565b60009182526020808320909101546001600160a01b031683528201929092526040019020546112319084611e4c565b92508061123d816121be565b9150506111db565b506104e2838361193b565b6060600061125c611917565b6001018054806020026020016040519081016040528092919081815260200182805480156112b357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611295575b50505050509050600081516001600160401b038111156112d5576112d5611ee0565b6040519080825280602002602001820160405280156112fe578160200160208202803683370190505b5090506000805b835181101561116357611316611917565b600001600085838151811061132d5761132d61216e565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600e0160029054906101000a900460ff16156113c45783818151811061137d5761137d61216e565b6020026020010151838380611391906121be565b9450815181106113a3576113a361216e565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806113ce816121be565b915050611305565b6000806000806000806000806114436040518061016001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b30600061144e611917565b6001018054806020026020016040519081016040528092919081815260200182805480156114a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611487575b5050505050905060005b81518110156117cc57826001600160a01b03166319aafc588383815181106114d9576114d961216e565b60200260200101518f6040518363ffffffff1660e01b81526004016114ff929190611e98565b608060405180830381865afa15801561151c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154091906121d7565b151561012088015260408701526020860181905290855215801561156357508351155b6117ba57826001600160a01b0316636f44bb698383815181106115885761158861216e565b60200260200101516040518263ffffffff1660e01b81526004016115ac9190611d19565b608060405180830381865afa1580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed91906121d7565b151561014088015260a087015260808601526060850181905261161190600a611e40565b60c085015261161e61182c565b6001600160a01b031663b3596f0783838151811061163e5761163e61216e565b60200260200101516040518263ffffffff1660e01b81526004016116629190611d19565b602060405180830381865afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a39190611d2d565b60e08501528351156117515760c0840151845160e08601516116c59190611e5f565b6116cf9190611e76565b61010085018190526116e1908d611e4c565b9b5083610140015180156116f757508361012001515b156117515761010084015161170c908c611e4c565b9a5083608001518461010001516117239190611e5f565b61172d9089611e4c565b97508360a001518461010001516117449190611e5f565b61174e9088611e4c565b96505b6020840151156117ba578360c0015184602001518560e001516117749190611e5f565b61177e9190611e76565b611788908b611e4c565b99508360c001518460e0015185604001516117a39190611e5f565b6117ad9190611e76565b6117b7908a611e4c565b98505b806117c4816121be565b9150506114af565b5060008a116117dc5760006117e6565b6117e68a88611e76565b965060008a116117f7576000611801565b6118018a87611e76565b955061180f8a8a8a89611972565b9450670de0b6b3a764000085109350505050919395975091939597565b7fff5923912191a1cc1ce52c1e63600d3ff20a63ae0f4211e3199b7ba72a991b5d546001600160a01b031690565b60008060646118698488611e5f565b6118739190611e76565b9050848111611886576000915050610e28565b6118908486611e4c565b61189a908261205a565b60405163249bbe9160e01b815260048101829052909150600090309063249bbe9190602401602060405180830381865afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119009190611d2d565b905061190c818361205a565b979650505050505050565b7f66cfe6d1341bbca11619797516c7fbf0624d144c78b9a40a4a3b4fb518fc11b690565b60008115670de0b6b3a76400006002840419048411171561195b57600080fd5b50670de0b6b3a76400009190910260028204010490565b6000836000036119855750600019610e28565b6119ae6119928486611e4c565b606461199e8589611e5f565b6119a89190611e76565b9061193b565b95945050505050565b80356001600160a01b03811681146119ce57600080fd5b919050565b60008060008060008060c087890312156119ec57600080fd5b6119f5876119b7565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060408385031215611a3057600080fd5b611a39836119b7565b9150611a47602084016119b7565b90509250929050565b600060208284031215611a6257600080fd5b610c4c826119b7565b60005b83811015611a86578181015183820152602001611a6e565b50506000910152565b60008151808452611aa7816020860160208601611a6b565b601f01601f19169290920160200192915050565b6000610100808352611acf8184018c611a8f565b602084019a909a52505060408101969096526060860194909452608085019290925260a084015260c0830152151560e090910152919050565b6000610100820190508982528860208301528760408301528660608301528560808301528460a083015260038410611b5057634e487b7160e01b600052602160045260246000fd5b8360c083015282151560e08301529998505050505050505050565b60008060008060808587031215611b8157600080fd5b611b8a856119b7565b9350611b98602086016119b7565b93969395505050506040820135916060013590565b6020815260008251610140806020850152611bcc610160850183611a8f565b9150602085015160408501526040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120611c2e8187018315159052565b90950151151593019290925250919050565b60008060408385031215611c5357600080fd5b611c5c836119b7565b946020939093013593505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611cbf57603f19888603018452611cad858351611a8f565b94509285019290850190600101611c91565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d0d5783516001600160a01b031683529284019291840191600101611ce8565b50909695505050505050565b6001600160a01b0391909116815260200190565b600060208284031215611d3f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611d97578160001904821115611d7d57611d7d611d46565b80851615611d8a57918102915b93841c9390800290611d61565b509250929050565b600082611dae575060016104b3565b81611dbb575060006104b3565b8160018114611dd15760028114611ddb57611df7565b60019150506104b3565b60ff841115611dec57611dec611d46565b50506001821b6104b3565b5060208310610133831016604e8410600b8410161715611e1a575081810a6104b3565b611e248383611d5c565b8060001904821115611e3857611e38611d46565b029392505050565b6000610c4c8383611d9f565b808201808211156104b3576104b3611d46565b80820281158282048414176104b3576104b3611d46565b600082611e9357634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0392831681529116602082015260400190565b600080600060608486031215611ec757600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715611f1957611f19611ee0565b60405290565b600082601f830112611f3057600080fd5b81516001600160401b0380821115611f4a57611f4a611ee0565b604051601f8301601f19908116603f01168101908282118183101715611f7257611f72611ee0565b81604052838152866020858801011115611f8b57600080fd5b6104e2846020830160208901611a6b565b805180151581146119ce57600080fd5b60008060008060008060c08789031215611fc557600080fd5b86516001600160401b03811115611fdb57600080fd5b611fe789828a01611f1f565b9650506020870151945060408701519350606087015192506080870151915061201260a08801611f9c565b90509295509295509295565b60006020828403121561203057600080fd5b815160038110610c4c57600080fd5b60006020828403121561205157600080fd5b610c4c82611f9c565b818103818111156104b3576104b3611d46565b60006020828403121561207f57600080fd5b81516001600160401b038082111561209657600080fd5b9083019061014082860312156120ab57600080fd5b6120b3611ef6565b8251828111156120c257600080fd5b6120ce87828601611f1f565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101009150612127828401611f9c565b82820152610120915061213b828401611f9c565b91810191909152949350505050565b6000806040838503121561215d57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061219857607f821691505b6020821081036121b857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600182016121d0576121d0611d46565b5060010190565b600080600080608085870312156121ed57600080fd5b84519350602085015192506040850151915061220b60608601611f9c565b90509295919450925056fea2646970667358221220f4d82fa703190c0e853da504df0c9617a781ee75daf1125f8aee8b80e41ae07364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c55760003560e01c806312737c33146100ca5780631e732ca3146100f0578063257fd1af14610103578063430d0b5b14610116578063491db4a21461013d5780634b1f6d531461016457806352791cc31461018c578063623b343b146101ac578063840794bc146101bf578063981c36fa146101d25780639872cb19146101e5578063cf6bd206146101f8578063d0dba4c81461020d578063d5cd7d2014610220578063e1fa02ba14610235575b600080fd5b6100dd6100d83660046119d3565b610285565b6040519081526020015b60405180910390f35b6100dd6100fe366004611a1d565b6103cf565b6100dd610111366004611a50565b6104b9565b610129610124366004611a1d565b6104ec565b6040516100e7989796959493929190611abb565b61015061014b366004611a1d565b610656565b6040516100e7989796959493929190611b08565b610177610172366004611b6b565b610994565b604080519283526020830191909152016100e7565b61019f61019a366004611a1d565b610b88565b6040516100e79190611bad565b6100dd6101ba366004611a1d565b610c53565b6100dd6101cd366004611c40565b610cbc565b6100dd6101e0366004611a1d565b610dad565b6100dd6101f3366004611c40565b610e30565b610200610f2f565b6040516100e79190611c6a565b6100dd61021b366004611a1d565b61116c565b610228611250565b6040516100e79190611ccc565b610248610243366004611a50565b6113d6565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016100e7565b60008061029061182c565b60405163d79357fb60e01b8152909150600090309063d79357fb906102b9908c90600401611d19565b602060405180830381865afa1580156102d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fa9190611d2d565b9050600061030982600a611e40565b610313898b611e4c565b60405163b3596f0760e01b81526001600160a01b0386169063b3596f079061033f908f90600401611d19565b602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103809190611d2d565b61038a9190611e5f565b6103949190611e76565b905084816103a2888a611e4c565b6103ac9190611e4c565b6103b7906064611e5f565b6103c19190611e76565b9a9950505050505050505050565b604051639fb8afcd60e01b815260009081903090639fb8afcd906103f99087908790600401611e98565b606060405180830381865afa158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043a9190611eb2565b5060405163249bbe9160e01b81526004810182905290925060009150309063249bbe9190602401602060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a29190611d2d565b90506104ae8183611e4c565b925050505b92915050565b60008060008060006104ca866113d6565b5050509450945094509450506104e28484848461185a565b9695505050505050565b60606000806000806000806000306001600160a01b031663517a55d78b8b6040518363ffffffff1660e01b8152600401610527929190611e98565b600060405180830381865afa158015610544573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056c9190810190611fac565b60405162b6c59160e31b8152959d50939b5091995096509350915030906305b62c889061059d908d90600401611d19565b602060405180830381865afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190611d2d565b60405163a99901a360e01b8152909350309063a99901a390610606908d908d90600401611e98565b602060405180830381865afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190611d2d565b94509295985092959890939650565b6000806000806000806000806000309050806001600160a01b0316639fb8afcd8c8c6040518363ffffffff1660e01b8152600401610695929190611e98565b606060405180830381865afa1580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190611eb2565b50604051631ca19f1960e01b8152909a509098506001600160a01b03821690631ca19f199061070b908e908e90600401611e98565b602060405180830381865afa158015610728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074c919061201e565b6040516338c06fbf60e21b81529093506001600160a01b0382169063e301befc9061077b908e90600401611d19565b602060405180830381865afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc9190611d2d565b604051633faacc6b60e21b81529097506001600160a01b0382169063feab31ac906107ed908e908e90600401611e98565b602060405180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190611d2d565b6040516359e7d6e560e01b81529096506001600160a01b038216906359e7d6e59061085f908e908e90600401611e98565b602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190611d2d565b604051632da1297d60e01b81529095506001600160a01b03821690632da1297d906108d1908e908e90600401611e98565b602060405180830381865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109129190611d2d565b6040516328ff386160e11b81529094506001600160a01b038216906351fe70c290610943908e908e90600401611e98565b602060405180830381865afa158015610960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610984919061203f565b9150509295985092959890939650565b60008060006109a161182c565b90506000816001600160a01b031663b3596f07896040518263ffffffff1660e01b81526004016109d19190611d19565b602060405180830381865afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a129190611d2d565b90506000826001600160a01b031663b3596f07896040518263ffffffff1660e01b8152600401610a429190611d19565b602060405180830381865afa158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a839190611d2d565b6040516346451e8560e01b815290915060009030906346451e8590610aac908c90600401611d19565b602060405180830381865afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190611d2d565b9050600082610afc858b611e5f565b610b069190611e76565b90506064610b148383611e5f565b610b1e9190611e76565b610b289082611e4c565b905087811115610b735787965083610b408489611e5f565b610b4a9190611e76565b95506064610b588388611e5f565b610b629190611e76565b610b6c908761205a565b9550610b7a565b8096508895505b505050505094509492505050565b610be260405180610140016040528060608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60405163f64619b360e01b8152309063f64619b390610c079086908690600401611e98565b600060405180830381865afa158015610c24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4c919081019061206d565b9392505050565b60405163f2ba567760e01b8152600090309063f2ba567790610c7b9086908690600401611e98565b602060405180830381865afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c9190611d2d565b600080610cc7611917565b6001600160a01b03851660009081526020919091526040812060028101549092503090638f88552890610cfb90879061205a565b868560030154610d0b9190611e4c565b601186015460128701546013880154601089015460405160e088901b6001600160e01b03191681526004810196909652602486019490945260448501929092526064840152608483015260a482015260c4016040805180830381865afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9d919061214a565b5090506104ae6298968082611e76565b604051639fb8afcd60e01b815260009081903090639fb8afcd90610dd79087908790600401611e98565b606060405180830381865afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190611eb2565b509150610e289050600282611e76565b949350505050565b60405163d79357fb60e01b81526000908190309063d79357fb90610e58908790600401611d19565b602060405180830381865afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e999190611d2d565b9050610ea681600a611e40565b83610eaf61182c565b6001600160a01b031663b3596f07876040518263ffffffff1660e01b8152600401610eda9190611d19565b602060405180830381865afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190611d2d565b610f259190611e5f565b610e289190611e76565b60606000610f3b611917565b600101805480602002602001604051908101604052809291908181526020018280548015610f9257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f74575b50505050509050600081516001600160401b03811115610fb457610fb4611ee0565b604051908082528060200260200182016040528015610fe757816020015b6060815260200190600190039081610fd25790505b5090506000805b835181101561116357610fff611917565b60000160008583815181106110165761101661216e565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600e0160029054906101000a900460ff16156111515761105c611917565b60000160008583815181106110735761107361216e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000180546110a990612184565b80601f01602080910402602001604051908101604052809291908181526020018280546110d590612184565b80156111225780601f106110f757610100808354040283529160200191611122565b820191906000526020600020905b81548152906001019060200180831161110557829003601f168201915b5050505050838380611133906121be565b9450815181106111455761114561216e565b60200260200101819052505b8061115b816121be565b915050610fee565b50909392505050565b600080611177611917565b6001600160a01b038086166000908152602092835260408082209287168252601890920190925281205491508190036111b45760009150506104b3565b6000806111bf611917565b6001600160a01b03871660009081526020919091526040812091505b6017820154811015611245578160180160008360170183815481106112025761120261216e565b60009182526020808320909101546001600160a01b031683528201929092526040019020546112319084611e4c565b92508061123d816121be565b9150506111db565b506104e2838361193b565b6060600061125c611917565b6001018054806020026020016040519081016040528092919081815260200182805480156112b357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611295575b50505050509050600081516001600160401b038111156112d5576112d5611ee0565b6040519080825280602002602001820160405280156112fe578160200160208202803683370190505b5090506000805b835181101561116357611316611917565b600001600085838151811061132d5761132d61216e565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600e0160029054906101000a900460ff16156113c45783818151811061137d5761137d61216e565b6020026020010151838380611391906121be565b9450815181106113a3576113a361216e565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806113ce816121be565b915050611305565b6000806000806000806000806114436040518061016001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b30600061144e611917565b6001018054806020026020016040519081016040528092919081815260200182805480156114a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611487575b5050505050905060005b81518110156117cc57826001600160a01b03166319aafc588383815181106114d9576114d961216e565b60200260200101518f6040518363ffffffff1660e01b81526004016114ff929190611e98565b608060405180830381865afa15801561151c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154091906121d7565b151561012088015260408701526020860181905290855215801561156357508351155b6117ba57826001600160a01b0316636f44bb698383815181106115885761158861216e565b60200260200101516040518263ffffffff1660e01b81526004016115ac9190611d19565b608060405180830381865afa1580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed91906121d7565b151561014088015260a087015260808601526060850181905261161190600a611e40565b60c085015261161e61182c565b6001600160a01b031663b3596f0783838151811061163e5761163e61216e565b60200260200101516040518263ffffffff1660e01b81526004016116629190611d19565b602060405180830381865afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a39190611d2d565b60e08501528351156117515760c0840151845160e08601516116c59190611e5f565b6116cf9190611e76565b61010085018190526116e1908d611e4c565b9b5083610140015180156116f757508361012001515b156117515761010084015161170c908c611e4c565b9a5083608001518461010001516117239190611e5f565b61172d9089611e4c565b97508360a001518461010001516117449190611e5f565b61174e9088611e4c565b96505b6020840151156117ba578360c0015184602001518560e001516117749190611e5f565b61177e9190611e76565b611788908b611e4c565b99508360c001518460e0015185604001516117a39190611e5f565b6117ad9190611e76565b6117b7908a611e4c565b98505b806117c4816121be565b9150506114af565b5060008a116117dc5760006117e6565b6117e68a88611e76565b965060008a116117f7576000611801565b6118018a87611e76565b955061180f8a8a8a89611972565b9450670de0b6b3a764000085109350505050919395975091939597565b7fff5923912191a1cc1ce52c1e63600d3ff20a63ae0f4211e3199b7ba72a991b5d546001600160a01b031690565b60008060646118698488611e5f565b6118739190611e76565b9050848111611886576000915050610e28565b6118908486611e4c565b61189a908261205a565b60405163249bbe9160e01b815260048101829052909150600090309063249bbe9190602401602060405180830381865afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119009190611d2d565b905061190c818361205a565b979650505050505050565b7f66cfe6d1341bbca11619797516c7fbf0624d144c78b9a40a4a3b4fb518fc11b690565b60008115670de0b6b3a76400006002840419048411171561195b57600080fd5b50670de0b6b3a76400009190910260028204010490565b6000836000036119855750600019610e28565b6119ae6119928486611e4c565b606461199e8589611e5f565b6119a89190611e76565b9061193b565b95945050505050565b80356001600160a01b03811681146119ce57600080fd5b919050565b60008060008060008060c087890312156119ec57600080fd5b6119f5876119b7565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060408385031215611a3057600080fd5b611a39836119b7565b9150611a47602084016119b7565b90509250929050565b600060208284031215611a6257600080fd5b610c4c826119b7565b60005b83811015611a86578181015183820152602001611a6e565b50506000910152565b60008151808452611aa7816020860160208601611a6b565b601f01601f19169290920160200192915050565b6000610100808352611acf8184018c611a8f565b602084019a909a52505060408101969096526060860194909452608085019290925260a084015260c0830152151560e090910152919050565b6000610100820190508982528860208301528760408301528660608301528560808301528460a083015260038410611b5057634e487b7160e01b600052602160045260246000fd5b8360c083015282151560e08301529998505050505050505050565b60008060008060808587031215611b8157600080fd5b611b8a856119b7565b9350611b98602086016119b7565b93969395505050506040820135916060013590565b6020815260008251610140806020850152611bcc610160850183611a8f565b9150602085015160408501526040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120611c2e8187018315159052565b90950151151593019290925250919050565b60008060408385031215611c5357600080fd5b611c5c836119b7565b946020939093013593505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611cbf57603f19888603018452611cad858351611a8f565b94509285019290850190600101611c91565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d0d5783516001600160a01b031683529284019291840191600101611ce8565b50909695505050505050565b6001600160a01b0391909116815260200190565b600060208284031215611d3f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611d97578160001904821115611d7d57611d7d611d46565b80851615611d8a57918102915b93841c9390800290611d61565b509250929050565b600082611dae575060016104b3565b81611dbb575060006104b3565b8160018114611dd15760028114611ddb57611df7565b60019150506104b3565b60ff841115611dec57611dec611d46565b50506001821b6104b3565b5060208310610133831016604e8410600b8410161715611e1a575081810a6104b3565b611e248383611d5c565b8060001904821115611e3857611e38611d46565b029392505050565b6000610c4c8383611d9f565b808201808211156104b3576104b3611d46565b80820281158282048414176104b3576104b3611d46565b600082611e9357634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0392831681529116602082015260400190565b600080600060608486031215611ec757600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715611f1957611f19611ee0565b60405290565b600082601f830112611f3057600080fd5b81516001600160401b0380821115611f4a57611f4a611ee0565b604051601f8301601f19908116603f01168101908282118183101715611f7257611f72611ee0565b81604052838152866020858801011115611f8b57600080fd5b6104e2846020830160208901611a6b565b805180151581146119ce57600080fd5b60008060008060008060c08789031215611fc557600080fd5b86516001600160401b03811115611fdb57600080fd5b611fe789828a01611f1f565b9650506020870151945060408701519350606087015192506080870151915061201260a08801611f9c565b90509295509295509295565b60006020828403121561203057600080fd5b815160038110610c4c57600080fd5b60006020828403121561205157600080fd5b610c4c82611f9c565b818103818111156104b3576104b3611d46565b60006020828403121561207f57600080fd5b81516001600160401b038082111561209657600080fd5b9083019061014082860312156120ab57600080fd5b6120b3611ef6565b8251828111156120c257600080fd5b6120ce87828601611f1f565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101009150612127828401611f9c565b82820152610120915061213b828401611f9c565b91810191909152949350505050565b6000806040838503121561215d57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061219857607f821691505b6020821081036121b857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600182016121d0576121d0611d46565b5060010190565b600080600080608085870312156121ed57600080fd5b84519350602085015192506040850151915061220b60608601611f9c565b90509295919450925056fea2646970667358221220f4d82fa703190c0e853da504df0c9617a781ee75daf1125f8aee8b80e41ae07364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUserGlobalData(address)": {
        "details": "get user data accross all pools"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}