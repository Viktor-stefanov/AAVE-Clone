{
<<<<<<< HEAD
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
=======
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
>>>>>>> 8368816306b1009bc08570c56343b91039488f15
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
<<<<<<< HEAD
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "test",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x229d5e1a5965ec700289234630d0f2d40842b5ebe06ffd02aa98b141430643da",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "981432",
    "logsBloom": "0x
    "blockHash": "0x8a107e319cba09bd351c6e80f60ee20acc3eae24429f7d92332c88e196737dc7",
    "transactionHash": "0x229d5e1a5965ec700289234630d0f2d40842b5ebe06ffd02aa98b141430643da",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "981432",
=======
    }
  ],
  "transactionHash": "0x832a1d17dc907ffb46222fd742dd59e83a1a2b31bc613582e8d81b29ee845143",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "739838",
    "logsBloom": "0x
    "blockHash": "0x8b928a80742144876bd9cfc48c49028ff43bec5d419fe6a1c2759e84173f478d",
    "transactionHash": "0x832a1d17dc907ffb46222fd742dd59e83a1a2b31bc613582e8d81b29ee845143",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "739838",
>>>>>>> 8368816306b1009bc08570c56343b91039488f15
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
<<<<<<< HEAD
  "solcInputHash": "ecdd54e2b93668a8ee0c549b1196fb8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"test\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingPoolCore.sol\":\"LendingPoolCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LendingPoolCore.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./libraries/LibFacet.sol\\\";\\nimport \\\"./libraries/WadRayMath.sol\\\";\\n\\ncontract LendingPoolCore {\\n    using WadRayMath for uint256;\\n\\n    function deposit(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) external payable {\\n        if (_pool == LibFacet.facetStorage().ethAddress)\\n            return depositEth(_pool, _user, _amount);\\n\\n        require(\\n            ERC20(_pool).balanceOf(_user) >= _amount,\\n            \\\"Insufficient token balance.\\\"\\n        );\\n        updatePoolOnDeposit(_pool, _amount);\\n        ERC20(_pool).transferFrom(_user, address(this), _amount);\\n    }\\n\\n    function depositEth(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        require(_user.balance >= _amount, \\\"Insufficient ETH balance.\\\");\\n        updatePoolOnDeposit(_pool, _amount);\\n        (bool success, ) = _user.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Error while sending eth.\\\");\\n    }\\n\\n    function redeem(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) external {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        require(\\n            pool.user[_user].liquidityProvided >= _amount,\\n            \\\"Can't redeem more than has been deposited.\\\"\\n        );\\n        require(\\n            pool.totalLiquidity >= _amount,\\n            \\\"Pool does not have enough resources at the current moment.\\\"\\n        );\\n        updatePoolIndexes(pool);\\n        uint256 ethAmount = getEthValue(_pool, _amount);\\n        require(\\n            getHealthFactor(\\n                pool.user[_user].collateralEthBalance - ethAmount,\\n                pool.user[_user].liquidationThreshold,\\n                pool.user[_user].compoundedBorrowBalance\\n            ) > 1,\\n            \\\"Cannot redeem as it will cause your loan health factor to drop below 1.\\\"\\n        );\\n        pool.user[_user].collateralEthBalance -= ethAmount;\\n        pool.user[_user].liquidityProvided -= _amount;\\n        pool.totalLiquidity -= _amount;\\n        updatePoolRates(pool);\\n        if (_pool == LibFacet.facetStorage().ethAddress) {\\n            (bool success, ) = _user.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"Error transfering ETH.\\\");\\n        } else ERC20(_pool).transferFrom(address(this), _user, _amount);\\n    }\\n\\n    function borrow(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) external payable {}\\n\\n    function getEthValue(address _token, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 loanToValue = LibFacet.lpcStorage().pools[_token].loanToValue;\\n        return ((_amount * loanToValue) / 100);\\n    }\\n\\n    function updatePoolOnDeposit(address _pool, uint256 _amount) internal {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        updatePoolIndexes(pool);\\n        pool.totalLiquidity += _amount;\\n        updatePoolRates(pool);\\n        pool.lastUpdatedTimestamp = block.timestamp;\\n        pool.user[msg.sender].liquidityProvided += _amount;\\n    }\\n\\n    function updatePoolIndexes(LibFacet.Pool storage _pool) internal {\\n        uint256 yearlyPeriod = getYearlyPeriod(\\n            block.timestamp,\\n            _pool.lastUpdatedTimestamp,\\n            LibFacet.lpcStorage().SECONDS_IN_YEAR\\n        );\\n        _pool.reserveNormalizedIncome = WadRayMath.rayMul(\\n            WadRayMath.rayMul(_pool.rates.currentLiquidityRate, yearlyPeriod) +\\n                1,\\n            _pool.cumulatedLiquidityIndex\\n        );\\n        _pool.cumulatedLiquidityIndex = WadRayMath.rayMul(\\n            WadRayMath.rayMul(_pool.rates.currentLiquidityRate, yearlyPeriod) +\\n                1,\\n            _pool.cumulatedLiquidityIndex\\n        );\\n        _pool.cumulatedVariableBorrowIndex = WadRayMath.rayMul(\\n            (1 +\\n                WadRayMath.rayDiv(\\n                    _pool.rates.variableBorrowRate,\\n                    LibFacet.lpcStorage().SECONDS_IN_YEAR\\n                ))**(block.timestamp - _pool.lastUpdatedTimestamp),\\n            _pool.cumulatedVariableBorrowIndex\\n        );\\n        for (uint256 i = 0; i < _pool.users.length; i++) {\\n            _pool.user[_pool.users[i]].compoundedBorrowBalance = WadRayMath\\n                .rayMul(\\n                    (\\n                        WadRayMath.rayMul(\\n                            WadRayMath.rayDiv(\\n                                _pool.cumulatedVariableBorrowIndex,\\n                                _pool\\n                                    .user[_pool.users[i]]\\n                                    .cumulatedVariableBorrowIndex\\n                            ),\\n                            (1 +\\n                                WadRayMath.rayDiv(\\n                                    _pool.rates.variableBorrowRate,\\n                                    LibFacet.lpcStorage().SECONDS_IN_YEAR\\n                                ))\\n                        )\\n                    )**(block.timestamp - _pool.lastUpdatedTimestamp),\\n                    _pool.user[_pool.users[i]].principalBorrowBalance\\n                );\\n            _pool.user[_pool.users[i]].cumulatedVariableBorrowIndex = WadRayMath\\n                .rayMul(\\n                    (1 +\\n                        WadRayMath.rayDiv(\\n                            _pool.rates.variableBorrowRate,\\n                            LibFacet.lpcStorage().SECONDS_IN_YEAR\\n                        ))**(block.timestamp - _pool.lastUpdatedTimestamp),\\n                    _pool.user[_pool.users[i]].cumulatedVariableBorrowIndex\\n                );\\n            _pool.user[_pool.users[i]].healthFactor = getHealthFactor(\\n                _pool.user[_pool.users[i]].collateralEthBalance,\\n                _pool.user[_pool.users[i]].liquidationThreshold,\\n                _pool.user[_pool.users[i]].compoundedBorrowBalance\\n            );\\n        }\\n    }\\n\\n    function updatePoolRates(LibFacet.Pool storage _pool) internal {\\n        _pool.rates.utilisationRate =\\n            _pool.totalBorrowedLiquidity /\\n            _pool.totalLiquidity;\\n        _pool.rates.variableBorrowRate = _pool.rates.utilisationRate <=\\n            _pool.rates.targetUtilisationRate\\n            ? _pool.rates.baseVariableBorrowRate +\\n                WadRayMath.rayMul(\\n                    (_pool.rates.utilisationRate /\\n                        _pool.rates.targetUtilisationRate),\\n                    _pool.rates.interestRateSlopeBelow\\n                )\\n            : _pool.rates.baseVariableBorrowRate +\\n                _pool.rates.interestRateSlopeBelow +\\n                WadRayMath.rayMul(\\n                    ((_pool.rates.utilisationRate -\\n                        _pool.rates.targetUtilisationRate) /\\n                        (1 - _pool.rates.targetUtilisationRate)),\\n                    _pool.rates.interestRateSlopeAbove\\n                );\\n        _pool.rates.overallBorrowRate = _pool.totalBorrowedLiquidity == 0\\n            ? 0\\n            : WadRayMath.rayDiv(\\n                WadRayMath.rayMul(\\n                    _pool.rates.variableBorrowRate,\\n                    _pool.totalVariableBorrowLiquidity\\n                ),\\n                _pool.totalBorrowedLiquidity\\n            );\\n        _pool.rates.currentLiquidityRate = WadRayMath.rayMul(\\n            _pool.rates.overallBorrowRate,\\n            _pool.rates.utilisationRate\\n        );\\n    }\\n\\n    function test(address _pool) external view returns (uint256) {\\n        return LibFacet.lpcStorage().pools[_pool].totalLiquidity;\\n    }\\n\\n    function getYearlyPeriod(\\n        uint256 _timestamp,\\n        uint256 _lastUpdatedTimestamp,\\n        uint256 _secondsInAYear\\n    ) internal pure returns (uint256) {\\n        return\\n            WadRayMath.wadDiv(\\n                WadRayMath.WAD * (_timestamp - _lastUpdatedTimestamp),\\n                _secondsInAYear\\n            );\\n    }\\n\\n    function getHealthFactor(\\n        uint256 _collateralEth,\\n        uint256 _liquidationThreshold,\\n        uint256 _compoundedBorrowBalance\\n    ) internal pure returns (uint256) {\\n        return\\n            WadRayMath.rayDiv(\\n                WadRayMath.rayMul(_collateralEth, _liquidationThreshold),\\n                _compoundedBorrowBalance\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5587567046d44e3d63bdc445349b592fb181f3974fe36cf5beee49c11c80cb6e\",\"license\":\"No-License\"},\"contracts/libraries/LibFacet.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nlibrary LibFacet {\\n    bytes32 constant LENDING_POOL_CORE_STORAGE_POSITION =\\n        keccak256(\\\"diamonds.standart.lending.pool.core.storage\\\");\\n    bytes32 constant FACET_STORAGE_POSITION =\\n        keccak256(\\\"diamonds.standart.facet.storage\\\");\\n\\n    // user data tied to his deposit\\n    struct UserPoolData {\\n        uint256 liquidityProvided;\\n        uint256 principalBorrowBalance;\\n        uint256 cumulatedVariableBorrowIndex; // interest cumulated by the variable borrows of the specific user\\n        uint256 compoundedBorrowBalance; // princialBorrowBalance + cumulatedVariableBorrowIndex\\n        uint256 collateralEthBalance;\\n        uint256 liquidationThreshold;\\n        uint256 originationFee;\\n        uint256 healthFactor;\\n    }\\n\\n    struct Pool {\\n        uint256 totalLiquidity;\\n        uint256 totalBorrowedLiquidity;\\n        uint256 totalVariableBorrowLiquidity;\\n        uint256 depositApy; // utilisation rate * (share of variable borrows * variable rate)\\n        uint256 cumulatedLiquidityIndex; // interest cumulated by the reserve during the time interval Dt\\n        uint256 reserveNormalizedIncome; // Ongoing interest cumulated by the reserve\\n        uint256 cumulatedVariableBorrowIndex;\\n        uint256 loanToValue; // weighted average of the LTVs of the currencies making up the reserve\\n        uint256 liquidationThreshold;\\n        uint256 liquidationBonus; // represented in percentage\\n        uint256 lastUpdatedTimestamp;\\n        bool isBorrowingEnabled;\\n        bool isUsableAsCollateral;\\n        bool isActive;\\n        bool isFreezed; // only allow repays and redeems, but not deposits, new borrowings or rate swap.\\n        InterestRate rates;\\n        mapping(address => UserPoolData) user;\\n        address[] users;\\n    }\\n\\n    struct LPCStorage {\\n        mapping(address => Pool) pools;\\n        address[] allPools;\\n        uint256 SECONDS_IN_YEAR;\\n    }\\n\\n    struct FacetStorage {\\n        address ethAddress;\\n        address lpcAddress;\\n    }\\n\\n    struct InterestRate {\\n        uint256 utilisationRate;\\n        uint256 targetUtilisationRate;\\n        uint256 interestRateSlopeBelow; // constant representing the scaling of the interest rate vs the utilization.\\n        uint256 interestRateSlopeAbove;\\n        uint256 baseVariableBorrowRate; // constant for totalBorrows = 0. Expressed in ray\\n        uint256 variableBorrowRate;\\n        uint256 overallBorrowRate; // (VariableBorrowRate * TotalVariableBorrows) / totalBorrows\\n        uint256 currentLiquidityRate; // overallBorrowRate * utilizationRate\\n    }\\n\\n    enum TokenVolatility {\\n        low,\\n        high\\n    }\\n\\n    struct InterestRateStorage {\\n        TokenVolatility volatility;\\n    }\\n\\n    function lpcStorage() internal pure returns (LPCStorage storage lpcs) {\\n        bytes32 position = LENDING_POOL_CORE_STORAGE_POSITION;\\n        assembly {\\n            lpcs.slot := position\\n        }\\n    }\\n\\n    function facetStorage() internal pure returns (FacetStorage storage fs) {\\n        bytes32 position = FACET_STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0763c7e2e9c4871856aa768ed80a08d4d90a8854ce9a7b9735685975629ab053\",\"license\":\"No-License\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            // Equivalent to require(x == 0 || (x * y) / x == y)\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfb6730b02f590aa4f40587dffee4a721196ba1b6f273f0d39d3cdacaa49b6e8a\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80630e6dfcd5146100445780635224372c146100665780638340f54914610079578063bb29998e1461008c575b600080fd5b34801561005057600080fd5b5061006461005f366004610e44565b6100be565b005b610064610074366004610e44565b505050565b610064610087366004610e44565b610484565b34801561009857600080fd5b506100ac6100a7366004610e80565b6105e7565b60405190815260200160405180910390f35b60006100c8610610565b6001600160a01b03808616600090815260209283526040808220928716825260148301909352919091205490915082111561015d5760405162461bcd60e51b815260206004820152602a60248201527f43616e27742072656465656d206d6f7265207468616e20686173206265656e206044820152693232b837b9b4ba32b21760b11b60648201526084015b60405180910390fd5b80548211156101d15760405162461bcd60e51b815260206004820152603a60248201527f506f6f6c20646f6573206e6f74206861766520656e6f756768207265736f757260448201527931b2b99030ba103a34329031bab93932b73a1036b7b6b2b73a1760311b6064820152608401610154565b6101da81610634565b60006101e68584610a38565b6001600160a01b038516600090815260148401602052604090206004015490915060019061024390610219908490610eb8565b6001600160a01b038716600090815260148601602052604090206005810154600390910154610a82565b116102c65760405162461bcd60e51b815260206004820152604760248201527f43616e6e6f742072656465656d2061732069742077696c6c206361757365207960448201527f6f7572206c6f616e206865616c746820666163746f7220746f2064726f70206260648201526632b637bb90189760c91b608482015260a401610154565b6001600160a01b0384166000908152601483016020526040812060040180548392906102f3908490610eb8565b90915550506001600160a01b038416600090815260148301602052604081208054859290610322908490610eb8565b909155505081548390839060009061033b908490610eb8565b9091555061034a905082610a9f565b610352610ba8565b546001600160a01b0390811690861603610408576000846001600160a01b03168460405160006040518083038185875af1925050503d80600081146103b3576040519150601f19603f3d011682016040523d82523d6000602084013e6103b8565b606091505b50509050806104025760405162461bcd60e51b815260206004820152601660248201527522b93937b9103a3930b739b332b934b7339022aa241760511b6044820152606401610154565b5061047d565b6040516323b872dd60e01b81526001600160a01b038616906323b872dd9061043890309088908890600401610ecb565b6020604051808303816000875af1158015610457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047b9190610eef565b505b5050505050565b61048c610ba8565b546001600160a01b03908116908416036104ab57610074838383610bcc565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a0823190602401602060405180830381865afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105189190610f11565b10156105645760405162461bcd60e51b815260206004820152601b60248201527a24b739bab33334b1b4b2b73a103a37b5b2b7103130b630b731b29760291b6044820152606401610154565b61056e8382610cca565b6040516323b872dd60e01b81526001600160a01b038416906323b872dd9061059e90859030908690600401610ecb565b6020604051808303816000875af11580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e19190610eef565b50505050565b60006105f1610610565b6001600160a01b03909216600090815260209290925250604090205490565b7f66cfe6d1341bbca11619797516c7fbf0624d144c78b9a40a4a3b4fb518fc11b690565b60006106504283600a0154610647610610565b60020154610d4c565b905061067b61066683600c016007015483610d73565b610671906001610f2a565b8360040154610d73565b60058301556013820154610693906106669083610d73565b6004830155600a8201546106e4906106ab9042610eb8565b60118401546106c5906106bc610610565b60020154610db4565b6106d0906001610f2a565b6106da9190611021565b8360060154610d73565b600683015560005b6015830154811015610074576107d183600a01544261070b9190610eb8565b61077f61075e86600601548760140160008960150188815481106107315761073161102d565b60009182526020808320909101546001600160a01b03168352820192909252604001902060020154610db4565b601187015461076f906106bc610610565b61077a906001610f2a565b610d73565b6107899190611021565b8460140160008660150185815481106107a4576107a461102d565b60009182526020808320909101546001600160a01b03168352820192909252604001902060010154610d73565b8360140160008560150184815481106107ec576107ec61102d565b60009182526020808320909101546001600160a01b03168352820192909252604001902060030155600a830154610895906108279042610eb8565b6011850154610838906106bc610610565b610843906001610f2a565b61084d9190611021565b8460140160008660150185815481106108685761086861102d565b60009182526020808320909101546001600160a01b03168352820192909252604001902060020154610d73565b8360140160008560150184815481106108b0576108b061102d565b60009182526020808320909101546001600160a01b031683528201929092526040018120600201919091556015840180546109e39260148701929091859081106108fc576108fc61102d565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600401548460140160008660150185815481106109595761095961102d565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600501548560140160008760150186815481106109b6576109b661102d565b60009182526020808320909101546001600160a01b03168352820192909252604001902060030154610a82565b8360140160008560150184815481106109fe576109fe61102d565b60009182526020808320909101546001600160a01b0316835282019290925260400190206007015580610a3081611043565b9150506106ec565b600080610a43610610565b6001600160a01b0385166000908152602091909152604090206007015490506064610a6e828561105c565b610a789190611073565b9150505b92915050565b6000610a97610a918585610d73565b83610db4565b949350505050565b80546001820154610ab09190611073565b600c8201819055600d8201541015610b2157600d810154610afe90610ad6906001610eb8565b600d830154600c840154610aea9190610eb8565b610af49190611073565b600f830154610d73565b600e8201546010830154610b129190610f2a565b610b1c9190610f2a565b610b51565b600d810154600c820154610b4291610b3891611073565b600e830154610d73565b6010820154610b519190610f2a565b6011820155600181015415610b8757610b82610b7882600c01600501548360020154610d73565b8260010154610db4565b610b8a565b60005b60128201819055600c820154610ba09190610d73565b601390910155565b7fff5923912191a1cc1ce52c1e63600d3ff20a63ae0f4211e3199b7ba72a991b5a90565b80826001600160a01b0316311015610c225760405162461bcd60e51b815260206004820152601960248201527824b739bab33334b1b4b2b73a1022aa24103130b630b731b29760391b6044820152606401610154565b610c2c8382610cca565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610c79576040519150601f19603f3d011682016040523d82523d6000602084013e610c7e565b606091505b50509050806105e15760405162461bcd60e51b815260206004820152601860248201527722b93937b9103bb434b6329039b2b73234b7339032ba341760411b6044820152606401610154565b6000610cd4610610565b6001600160a01b0384166000908152602091909152604090209050610cf881610634565b81816000016000828254610d0c9190610f2a565b90915550610d1b905081610a9f565b42600a82015533600090815260148201602052604081208054849290610d42908490610f2a565b9091555050505050565b6000610a97610d5b8486610eb8565b610d6d90670de0b6b3a764000061105c565b83610df1565b60008115676765c793fa10079d601a1b1983900484111517610d9457600080fd5b50676765c793fa10079d601b1b9102676765c793fa10079d601a1b010490565b60008115676765c793fa10079d601b1b60028404190484111715610dd757600080fd5b50676765c793fa10079d601b1b9190910260028204010490565b60008115670de0b6b3a764000060028404190484111715610e1157600080fd5b50670de0b6b3a76400009190910260028204010490565b80356001600160a01b0381168114610e3f57600080fd5b919050565b600080600060608486031215610e5957600080fd5b610e6284610e28565b9250610e7060208501610e28565b9150604084013590509250925092565b600060208284031215610e9257600080fd5b610e9b82610e28565b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a7c57610a7c610ea2565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610f0157600080fd5b81518015158114610e9b57600080fd5b600060208284031215610f2357600080fd5b5051919050565b80820180821115610a7c57610a7c610ea2565b600181815b80851115610f78578160001904821115610f5e57610f5e610ea2565b80851615610f6b57918102915b93841c9390800290610f42565b509250929050565b600082610f8f57506001610a7c565b81610f9c57506000610a7c565b8160018114610fb25760028114610fbc57610fd8565b6001915050610a7c565b60ff841115610fcd57610fcd610ea2565b50506001821b610a7c565b5060208310610133831016604e8410600b8410161715610ffb575081810a610a7c565b6110058383610f3d565b806000190482111561101957611019610ea2565b029392505050565b6000610e9b8383610f80565b634e487b7160e01b600052603260045260246000fd5b60006001820161105557611055610ea2565b5060010190565b8082028115828204841417610a7c57610a7c610ea2565b60008261109057634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212207e70d429f8a81e2860b6e91e05888fa6c719446881436532b395fb43a0e967a564736f6c63430008110033",
=======
  "solcInputHash": "20a73e0b3afbe823c8b708e5b1543d40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingPoolCore.sol\":\"LendingPoolCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LendingPoolCore.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./libraries/LibFacet.sol\\\";\\nimport \\\"./libraries/WadRayMath.sol\\\";\\n\\ncontract LendingPoolCore {\\n    using WadRayMath for uint256;\\n\\n    function deposit(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) external payable {\\n        if (_pool == LibFacet.facetStorage().ethAddress)\\n            return depositEth(_pool, _user, _amount);\\n\\n        require(\\n            ERC20(_pool).balanceOf(_user) >= _amount,\\n            \\\"Insufficient token balance.\\\"\\n        );\\n        updatePoolOnDeposit(_pool, _amount);\\n        ERC20(_pool).transferFrom(_user, address(this), _amount);\\n    }\\n\\n    function depositEth(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        require(_user.balance >= _amount, \\\"Insufficient ETH balance.\\\");\\n        updatePoolOnDeposit(_pool, _amount);\\n        (bool success, ) = _user.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Error while sending eth.\\\");\\n    }\\n\\n    function redeem(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) external {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        require(\\n            pool.user[_user].liquidityProvided >= _amount,\\n            \\\"Can't redeem more than has been deposited.\\\"\\n        );\\n        require(\\n            pool.totalLiquidity >= _amount,\\n            \\\"Pool does not have enough resources at the current moment.\\\"\\n        );\\n        updateCumulativeIndexes(pool);\\n        uint256 ethAmount = getEthValue(_pool, _amount);\\n        require(\\n            getHealthFactor(\\n                pool.user[_user].collateralEthBalance - ethAmount,\\n                pool.user[_user].liquidationThreshold,\\n                pool.user[_user].compoundedBorrowBalance\\n            ) > 1,\\n            \\\"Cannot redeem as it will cause your loan health factor to drop below 1.\\\"\\n        );\\n        pool.user[_user].collateralEthBalance -= ethAmount;\\n        pool.user[_user].liquidityProvided -= _amount;\\n        pool.totalLiquidity -= _amount;\\n        updatePoolRates(pool);\\n        if (_pool == LibFacet.facetStorage().ethAddress) {\\n            (bool success, ) = _user.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"Error transfering ETH.\\\");\\n        } else ERC20(_pool).transferFrom(address(this), _user, _amount);\\n    }\\n\\n    function borrow(\\n        address _pool,\\n        address _user,\\n        uint256 _amount\\n    ) external payable {}\\n\\n    function getEthValue(address _token, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 loanToValue = LibFacet.lpcStorage().pools[_token].loanToValue;\\n        return ((_amount * loanToValue) / 100);\\n    }\\n\\n    function updatePoolOnDeposit(address _pool, uint256 _amount) internal {\\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\\n        updateCumulativeIndexes(pool);\\n        pool.totalLiquidity += _amount;\\n        updatePoolRates(pool);\\n        pool.lastUpdatedTimestamp = block.timestamp;\\n        pool.user[msg.sender].liquidityProvided += _amount;\\n    }\\n\\n    function calculateCumulatedVariableBorrowInterest(\\n        uint256 _variableBorrowRate,\\n        uint256 _secondsInAYear,\\n        uint256 _timestamp,\\n        uint256 _lastUpdatedTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 ratePerSecond = _variableBorrowRate.rayDiv(_secondsInAYear);\\n        return\\n            ratePerSecond +\\n            (WadRayMath.RAY.rayPow(_timestamp - _lastUpdatedTimestamp));\\n    }\\n\\n    function updateCumulativeIndexes(LibFacet.Pool storage _pool) internal {\\n        // do all this only if totalBorrows > 0\\n        _pool.cumulatedLiquidityIndex = calculateCumulatedLiquidityInterest(\\n            _pool.rates.currentLiquidityRate,\\n            _pool.lastUpdatedTimestamp\\n        ).rayMul(_pool.cumulatedLiquidityIndex);\\n        _pool\\n            .cumulatedVariableBorrowIndex = calculateCumulatedVariableBorrowInterest(\\n            _pool.rates.variableBorrowRate,\\n            LibFacet.lpcStorage().SECONDS_IN_YEAR,\\n            block.timestamp,\\n            _pool.lastUpdatedTimestamp\\n        ).rayMul(_pool.cumulatedVariableBorrowIndex);\\n\\n        //_pool.reserveNormalizedIncome = WadRayMath.rayMul(\\n        //    WadRayMath.rayMul(_pool.rates.currentLiquidityRate, yearlyPeriod) +\\n        //        1,\\n        //    _pool.cumulatedLiquidityIndex\\n        //);\\n        //for (uint256 i = 0; i < _pool.users.length; i++) {\\n        //    _pool.user[_pool.users[i]].compoundedBorrowBalance = WadRayMath\\n        //        .rayMul(\\n        //            (\\n        //                WadRayMath.rayMul(\\n        //                    WadRayMath.rayDiv(\\n        //                        _pool.cumulatedVariableBorrowIndex,\\n        //                        _pool\\n        //                            .user[_pool.users[i]]\\n        //                            .cumulatedVariableBorrowIndex\\n        //                    ),\\n        //                    (1 +\\n        //                        WadRayMath.rayDiv(\\n        //                            _pool.rates.variableBorrowRate,\\n        //                            LibFacet.lpcStorage().SECONDS_IN_YEAR\\n        //                        ))\\n        //                )\\n        //            )**(block.timestamp - _pool.lastUpdatedTimestamp),\\n        //            _pool.user[_pool.users[i]].principalBorrowBalance\\n        //        );\\n        //    _pool.user[_pool.users[i]].cumulatedVariableBorrowIndex = WadRayMath\\n        //        .rayMul(\\n        //            (1 +\\n        //                WadRayMath.rayDiv(\\n        //                    _pool.rates.variableBorrowRate,\\n        //                    LibFacet.lpcStorage().SECONDS_IN_YEAR\\n        //                ))**(block.timestamp - _pool.lastUpdatedTimestamp),\\n        //            _pool.user[_pool.users[i]].cumulatedVariableBorrowIndex\\n        //        );\\n        //    _pool.user[_pool.users[i]].healthFactor = getHealthFactor(\\n        //        _pool.user[_pool.users[i]].collateralEthBalance,\\n        //        _pool.user[_pool.users[i]].liquidationThreshold,\\n        //        _pool.user[_pool.users[i]].compoundedBorrowBalance\\n        //    );\\n        //}\\n    }\\n\\n    function updatePoolRates(LibFacet.Pool storage _pool) internal {\\n        _pool.rates.utilisationRate =\\n            _pool.totalBorrowedLiquidity /\\n            _pool.totalLiquidity;\\n        _pool.rates.variableBorrowRate = _pool.rates.utilisationRate <=\\n            _pool.rates.targetUtilisationRate\\n            ? _pool.rates.baseVariableBorrowRate +\\n                WadRayMath.rayMul(\\n                    (_pool.rates.utilisationRate /\\n                        _pool.rates.targetUtilisationRate),\\n                    _pool.rates.interestRateSlopeBelow\\n                )\\n            : _pool.rates.baseVariableBorrowRate +\\n                _pool.rates.interestRateSlopeBelow +\\n                WadRayMath.rayMul(\\n                    ((_pool.rates.utilisationRate -\\n                        _pool.rates.targetUtilisationRate) /\\n                        (1 - _pool.rates.targetUtilisationRate)),\\n                    _pool.rates.interestRateSlopeAbove\\n                );\\n        _pool.rates.overallBorrowRate = _pool.totalBorrowedLiquidity == 0\\n            ? 0\\n            : WadRayMath.rayDiv(\\n                WadRayMath.rayMul(\\n                    _pool.rates.variableBorrowRate,\\n                    _pool.totalVariableBorrowLiquidity\\n                ),\\n                _pool.totalBorrowedLiquidity\\n            );\\n        _pool.rates.currentLiquidityRate = WadRayMath.rayMul(\\n            _pool.rates.overallBorrowRate,\\n            _pool.rates.utilisationRate\\n        );\\n    }\\n\\n    function calculateCumulatedLiquidityInterest(\\n        uint256 _currentLiquidityRate,\\n        uint256 _lastUpdatedTimestamp\\n    ) internal view returns (uint256) {\\n        uint256 yearlyPeriod = getYearlyPeriod(\\n            block.timestamp,\\n            _lastUpdatedTimestamp,\\n            LibFacet.lpcStorage().SECONDS_IN_YEAR\\n        );\\n        return _currentLiquidityRate.rayMul(yearlyPeriod) + WadRayMath.RAY;\\n    }\\n\\n    function getYearlyPeriod(\\n        uint256 _timestamp,\\n        uint256 _lastUpdatedTimestamp,\\n        uint256 _secondsInAYear\\n    ) internal pure returns (uint256) {\\n        return\\n            (_timestamp - _lastUpdatedTimestamp).wadToRay().rayDiv(\\n                _secondsInAYear.wadToRay()\\n            );\\n    }\\n\\n    function getHealthFactor(\\n        uint256 _collateralEth,\\n        uint256 _liquidationThreshold,\\n        uint256 _compoundedBorrowBalance\\n    ) internal pure returns (uint256) {\\n        return\\n            _collateralEth.rayMul(_liquidationThreshold).rayDiv(\\n                _compoundedBorrowBalance\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd61a83f919f862a90981f8fd24be1440c4aeea8d4dc0d3fcb8a19d38f3ad9e4e\",\"license\":\"No-License\"},\"contracts/libraries/LibFacet.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nlibrary LibFacet {\\n    bytes32 constant LENDING_POOL_CORE_STORAGE_POSITION =\\n        keccak256(\\\"diamonds.standart.lending.pool.core.storage\\\");\\n    bytes32 constant FACET_STORAGE_POSITION =\\n        keccak256(\\\"diamonds.standart.facet.storage\\\");\\n\\n    // user data tied to his deposit\\n    struct UserPoolData {\\n        uint256 liquidityProvided;\\n        uint256 principalBorrowBalance;\\n        uint256 cumulatedVariableBorrowIndex; // interest cumulated by the variable borrows of the specific user\\n        uint256 compoundedBorrowBalance; // princialBorrowBalance + cumulatedVariableBorrowIndex\\n        uint256 collateralEthBalance;\\n        uint256 liquidationThreshold;\\n        uint256 originationFee;\\n        uint256 healthFactor;\\n    }\\n\\n    struct Pool {\\n        uint256 totalLiquidity;\\n        uint256 totalBorrowedLiquidity;\\n        uint256 totalVariableBorrowLiquidity;\\n        uint256 depositApy; // utilisation rate * (share of variable borrows * variable rate)\\n        uint256 cumulatedLiquidityIndex; // interest cumulated by the reserve during the time interval Dt\\n        uint256 reserveNormalizedIncome; // Ongoing interest cumulated by the reserve\\n        uint256 cumulatedVariableBorrowIndex;\\n        uint256 loanToValue; // weighted average of the LTVs of the currencies making up the reserve\\n        uint256 liquidationThreshold;\\n        uint256 liquidationBonus; // represented in percentage\\n        uint256 lastUpdatedTimestamp;\\n        bool isBorrowingEnabled;\\n        bool isUsableAsCollateral;\\n        bool isActive;\\n        bool isFreezed; // only allow repays and redeems, but not deposits, new borrowings or rate swap.\\n        InterestRate rates;\\n        mapping(address => UserPoolData) user;\\n        address[] users;\\n    }\\n\\n    struct LPCStorage {\\n        mapping(address => Pool) pools;\\n        address[] allPools;\\n        uint256 SECONDS_IN_YEAR;\\n    }\\n\\n    struct FacetStorage {\\n        address ethAddress;\\n        address lpcAddress;\\n    }\\n\\n    struct InterestRate {\\n        uint256 utilisationRate;\\n        uint256 targetUtilisationRate;\\n        uint256 interestRateSlopeBelow; // constant representing the scaling of the interest rate vs the utilization.\\n        uint256 interestRateSlopeAbove;\\n        uint256 baseVariableBorrowRate; // constant for totalBorrows = 0. Expressed in ray\\n        uint256 variableBorrowRate;\\n        uint256 overallBorrowRate; // (VariableBorrowRate * TotalVariableBorrows) / totalBorrows\\n        uint256 currentLiquidityRate; // overallBorrowRate * utilizationRate\\n    }\\n\\n    enum TokenVolatility {\\n        low,\\n        high\\n    }\\n\\n    struct InterestRateStorage {\\n        TokenVolatility volatility;\\n    }\\n\\n    function lpcStorage() internal pure returns (LPCStorage storage lpcs) {\\n        bytes32 position = LENDING_POOL_CORE_STORAGE_POSITION;\\n        assembly {\\n            lpcs.slot := position\\n        }\\n    }\\n\\n    function facetStorage() internal pure returns (FacetStorage storage fs) {\\n        bytes32 position = FACET_STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0763c7e2e9c4871856aa768ed80a08d4d90a8854ce9a7b9735685975629ab053\",\"license\":\"No-License\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            // Equivalent to require(x == 0 || (x * y) / x == y)\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74d16d29afcc5dcb605b47389af1535fedacd849714a76cdbac9700295594746\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c6b806100206000396000f3fe6080604052600436106100345760003560e01c80630e6dfcd5146100395780635224372c1461005b5780638340f5491461006e575b600080fd5b34801561004557600080fd5b50610059610054366004610b02565b610081565b005b610059610069366004610b02565b505050565b61005961007c366004610b02565b610447565b600061008b6105aa565b6001600160a01b0380861660009081526020928352604080822092871682526014830190935291909120549091508211156101205760405162461bcd60e51b815260206004820152602a60248201527f43616e27742072656465656d206d6f7265207468616e20686173206265656e206044820152693232b837b9b4ba32b21760b11b60648201526084015b60405180910390fd5b80548211156101945760405162461bcd60e51b815260206004820152603a60248201527f506f6f6c20646f6573206e6f74206861766520656e6f756768207265736f757260448201527931b2b99030ba103a34329031bab93932b73a1036b7b6b2b73a1760311b6064820152608401610117565b61019d816105ce565b60006101a98584610628565b6001600160a01b0385166000908152601484016020526040902060040154909150600190610206906101dc908490610b54565b6001600160a01b038716600090815260148601602052604090206005810154600390910154610672565b116102895760405162461bcd60e51b815260206004820152604760248201527f43616e6e6f742072656465656d2061732069742077696c6c206361757365207960448201527f6f7572206c6f616e206865616c746820666163746f7220746f2064726f70206260648201526632b637bb90189760c91b608482015260a401610117565b6001600160a01b0384166000908152601483016020526040812060040180548392906102b6908490610b54565b90915550506001600160a01b0384166000908152601483016020526040812080548592906102e5908490610b54565b90915550508154839083906000906102fe908490610b54565b9091555061030d905082610690565b610315610799565b546001600160a01b03908116908616036103cb576000846001600160a01b03168460405160006040518083038185875af1925050503d8060008114610376576040519150601f19603f3d011682016040523d82523d6000602084013e61037b565b606091505b50509050806103c55760405162461bcd60e51b815260206004820152601660248201527522b93937b9103a3930b739b332b934b7339022aa241760511b6044820152606401610117565b50610440565b6040516323b872dd60e01b81526001600160a01b038616906323b872dd906103fb90309088908890600401610b67565b6020604051808303816000875af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190610b8b565b505b5050505050565b61044f610799565b546001600160a01b039081169084160361046e576100698383836107bd565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a0823190602401602060405180830381865afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190610bb4565b10156105275760405162461bcd60e51b815260206004820152601b60248201527a24b739bab33334b1b4b2b73a103a37b5b2b7103130b630b731b29760291b6044820152606401610117565b61053183826108bb565b6040516323b872dd60e01b81526001600160a01b038416906323b872dd9061056190859030908690600401610b67565b6020604051808303816000875af1158015610580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a49190610b8b565b50505050565b7f66cfe6d1341bbca11619797516c7fbf0624d144c78b9a40a4a3b4fb518fc11b690565b6105f181600401546105eb83600c016007015484600a015461093d565b90610978565b60048201556006810154601182015461062091906105eb906106116105aa565b600201544286600a01546109b9565b600690910155565b6000806106336105aa565b6001600160a01b038516600090815260209190915260409020600701549050606461065e8285610bcd565b6106689190610bfa565b9150505b92915050565b6000610688826106828686610978565b906109fb565b949350505050565b805460018201546106a19190610bfa565b600c8201819055600d820154101561071257600d8101546106ef906106c7906001610b54565b600d830154600c8401546106db9190610b54565b6106e59190610bfa565b600f830154610978565b600e82015460108301546107039190610c0e565b61070d9190610c0e565b610742565b600d810154600c8201546107339161072991610bfa565b600e830154610978565b60108201546107429190610c0e565b60118201556001810154156107785761077361076982600c01600501548360020154610978565b82600101546109fb565b61077b565b60005b60128201819055600c8201546107919190610978565b601390910155565b7fff5923912191a1cc1ce52c1e63600d3ff20a63ae0f4211e3199b7ba72a991b5a90565b80826001600160a01b03163110156108135760405162461bcd60e51b815260206004820152601960248201527824b739bab33334b1b4b2b73a1022aa24103130b630b731b29760391b6044820152606401610117565b61081d83826108bb565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461086a576040519150601f19603f3d011682016040523d82523d6000602084013e61086f565b606091505b50509050806105a45760405162461bcd60e51b815260206004820152601860248201527722b93937b9103bb434b6329039b2b73234b7339032ba341760411b6044820152606401610117565b60006108c56105aa565b6001600160a01b03841660009081526020919091526040902090506108e9816105ce565b818160000160008282546108fd9190610c0e565b9091555061090c905081610690565b42600a82015533600090815260148201602052604081208054849290610933908490610c0e565b9091555050505050565b600080610956428461094d6105aa565b60020154610a38565b9050676765c793fa10079d601b1b61096e8583610978565b6106689190610c0e565b60008115676765c793fa10079d601a1b198390048411151761099957600080fd5b50676765c793fa10079d601b1b9102676765c793fa10079d601a1b010490565b6000806109c686866109fb565b90506109e76109d58486610b54565b676765c793fa10079d601b1b90610a58565b6109f19082610c0e565b9695505050505050565b60008115676765c793fa10079d601b1b60028404190484111715610a1e57600080fd5b50676765c793fa10079d601b1b9190910260028204010490565b6000610688610a4683610ad0565b610682610a538688610b54565b610ad0565b6000610a65600283610c21565b600003610a7d57676765c793fa10079d601b1b610a7f565b825b9050610a8c600283610bfa565b91505b811561066c57610a9f8384610978565b9250610aac600283610c21565b15610abe57610abb8184610978565b90505b610ac9600283610bfa565b9150610a8f565b633b9aca008181029081048214610ae657600080fd5b919050565b80356001600160a01b0381168114610ae657600080fd5b600080600060608486031215610b1757600080fd5b610b2084610aeb565b9250610b2e60208501610aeb565b9150604084013590509250925092565b634e487b7160e01b600052601160045260246000fd5b8181038181111561066c5761066c610b3e565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610b9d57600080fd5b81518015158114610bad57600080fd5b9392505050565b600060208284031215610bc657600080fd5b5051919050565b808202811582820484141761066c5761066c610b3e565b634e487b7160e01b600052601260045260246000fd5b600082610c0957610c09610be4565b500490565b8082018082111561066c5761066c610b3e565b600082610c3057610c30610be4565b50069056fea2646970667358221220cd7c2ed102e030f7e5374bc97c73f0edc789a23d98517066978acaca6ba1e07c64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c80630e6dfcd5146100395780635224372c1461005b5780638340f5491461006e575b600080fd5b34801561004557600080fd5b50610059610054366004610b02565b610081565b005b610059610069366004610b02565b505050565b61005961007c366004610b02565b610447565b600061008b6105aa565b6001600160a01b0380861660009081526020928352604080822092871682526014830190935291909120549091508211156101205760405162461bcd60e51b815260206004820152602a60248201527f43616e27742072656465656d206d6f7265207468616e20686173206265656e206044820152693232b837b9b4ba32b21760b11b60648201526084015b60405180910390fd5b80548211156101945760405162461bcd60e51b815260206004820152603a60248201527f506f6f6c20646f6573206e6f74206861766520656e6f756768207265736f757260448201527931b2b99030ba103a34329031bab93932b73a1036b7b6b2b73a1760311b6064820152608401610117565b61019d816105ce565b60006101a98584610628565b6001600160a01b0385166000908152601484016020526040902060040154909150600190610206906101dc908490610b54565b6001600160a01b038716600090815260148601602052604090206005810154600390910154610672565b116102895760405162461bcd60e51b815260206004820152604760248201527f43616e6e6f742072656465656d2061732069742077696c6c206361757365207960448201527f6f7572206c6f616e206865616c746820666163746f7220746f2064726f70206260648201526632b637bb90189760c91b608482015260a401610117565b6001600160a01b0384166000908152601483016020526040812060040180548392906102b6908490610b54565b90915550506001600160a01b0384166000908152601483016020526040812080548592906102e5908490610b54565b90915550508154839083906000906102fe908490610b54565b9091555061030d905082610690565b610315610799565b546001600160a01b03908116908616036103cb576000846001600160a01b03168460405160006040518083038185875af1925050503d8060008114610376576040519150601f19603f3d011682016040523d82523d6000602084013e61037b565b606091505b50509050806103c55760405162461bcd60e51b815260206004820152601660248201527522b93937b9103a3930b739b332b934b7339022aa241760511b6044820152606401610117565b50610440565b6040516323b872dd60e01b81526001600160a01b038616906323b872dd906103fb90309088908890600401610b67565b6020604051808303816000875af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190610b8b565b505b5050505050565b61044f610799565b546001600160a01b039081169084160361046e576100698383836107bd565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a0823190602401602060405180830381865afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190610bb4565b10156105275760405162461bcd60e51b815260206004820152601b60248201527a24b739bab33334b1b4b2b73a103a37b5b2b7103130b630b731b29760291b6044820152606401610117565b61053183826108bb565b6040516323b872dd60e01b81526001600160a01b038416906323b872dd9061056190859030908690600401610b67565b6020604051808303816000875af1158015610580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a49190610b8b565b50505050565b7f66cfe6d1341bbca11619797516c7fbf0624d144c78b9a40a4a3b4fb518fc11b690565b6105f181600401546105eb83600c016007015484600a015461093d565b90610978565b60048201556006810154601182015461062091906105eb906106116105aa565b600201544286600a01546109b9565b600690910155565b6000806106336105aa565b6001600160a01b038516600090815260209190915260409020600701549050606461065e8285610bcd565b6106689190610bfa565b9150505b92915050565b6000610688826106828686610978565b906109fb565b949350505050565b805460018201546106a19190610bfa565b600c8201819055600d820154101561071257600d8101546106ef906106c7906001610b54565b600d830154600c8401546106db9190610b54565b6106e59190610bfa565b600f830154610978565b600e82015460108301546107039190610c0e565b61070d9190610c0e565b610742565b600d810154600c8201546107339161072991610bfa565b600e830154610978565b60108201546107429190610c0e565b60118201556001810154156107785761077361076982600c01600501548360020154610978565b82600101546109fb565b61077b565b60005b60128201819055600c8201546107919190610978565b601390910155565b7fff5923912191a1cc1ce52c1e63600d3ff20a63ae0f4211e3199b7ba72a991b5a90565b80826001600160a01b03163110156108135760405162461bcd60e51b815260206004820152601960248201527824b739bab33334b1b4b2b73a1022aa24103130b630b731b29760391b6044820152606401610117565b61081d83826108bb565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461086a576040519150601f19603f3d011682016040523d82523d6000602084013e61086f565b606091505b50509050806105a45760405162461bcd60e51b815260206004820152601860248201527722b93937b9103bb434b6329039b2b73234b7339032ba341760411b6044820152606401610117565b60006108c56105aa565b6001600160a01b03841660009081526020919091526040902090506108e9816105ce565b818160000160008282546108fd9190610c0e565b9091555061090c905081610690565b42600a82015533600090815260148201602052604081208054849290610933908490610c0e565b9091555050505050565b600080610956428461094d6105aa565b60020154610a38565b9050676765c793fa10079d601b1b61096e8583610978565b6106689190610c0e565b60008115676765c793fa10079d601a1b198390048411151761099957600080fd5b50676765c793fa10079d601b1b9102676765c793fa10079d601a1b010490565b6000806109c686866109fb565b90506109e76109d58486610b54565b676765c793fa10079d601b1b90610a58565b6109f19082610c0e565b9695505050505050565b60008115676765c793fa10079d601b1b60028404190484111715610a1e57600080fd5b50676765c793fa10079d601b1b9190910260028204010490565b6000610688610a4683610ad0565b610682610a538688610b54565b610ad0565b6000610a65600283610c21565b600003610a7d57676765c793fa10079d601b1b610a7f565b825b9050610a8c600283610bfa565b91505b811561066c57610a9f8384610978565b9250610aac600283610c21565b15610abe57610abb8184610978565b90505b610ac9600283610bfa565b9150610a8f565b633b9aca008181029081048214610ae657600080fd5b919050565b80356001600160a01b0381168114610ae657600080fd5b600080600060608486031215610b1757600080fd5b610b2084610aeb565b9250610b2e60208501610aeb565b9150604084013590509250925092565b634e487b7160e01b600052601160045260246000fd5b8181038181111561066c5761066c610b3e565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610b9d57600080fd5b81518015158114610bad57600080fd5b9392505050565b600060208284031215610bc657600080fd5b5051919050565b808202811582820484141761066c5761066c610b3e565b634e487b7160e01b600052601260045260246000fd5b600082610c0957610c09610be4565b500490565b8082018082111561066c5761066c610b3e565b600082610c3057610c30610be4565b50069056fea2646970667358221220cd7c2ed102e030f7e5374bc97c73f0edc789a23d98517066978acaca6ba1e07c64736f6c63430008110033",
>>>>>>> 8368816306b1009bc08570c56343b91039488f15
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}