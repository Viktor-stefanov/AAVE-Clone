{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/LendingPoolConfigurator.sol": {
      "content": "// SPDX-License-Identifier: No-License\npragma solidity 0.8.17;\n\nimport \"./libraries/LibFacet.sol\";\nimport \"./libraries/WadRayMath.sol\";\nimport \"./LendingPoolCore.sol\";\n\ncontract LendingPoolConfigurator {\n    using WadRayMath for uint256;\n\n    function init() external {}\n\n    function createPool(\n        address _pool,\n        uint256 _amount,\n        LibFacet.TokenVolatility _volatility\n    ) external payable {\n        initPool(_pool, _volatility);\n        LendingPoolCore(LibFacet.facetStorage().lpcAddress).deposit(\n            _pool,\n            msg.sender,\n            _amount\n        );\n    }\n\n    function initPool(address _pool, LibFacet.TokenVolatility _volatility)\n        internal\n    {\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\n        pool.cumulatedLiquidityIndex = WadRayMath.RAY;\n        pool.cumulatedVariableBorrowIndex = WadRayMath.RAY;\n        pool.isActive = true;\n        pool.lastUpdatedTimestamp = block.timestamp;\n        if (_volatility == LibFacet.TokenVolatility.low) {\n            pool.rates.interestRateSlopeAbove = 110 * WadRayMath.RAY;\n            pool.rates.interestRateSlopeBelow = 5 * WadRayMath.RAY;\n            pool.rates.baseVariableBorrowRate = 1 * WadRayMath.RAY;\n            pool.rates.targetUtilisationRate = 85;\n            pool.liquidationThreshold = 90; /// TODO: consider if this is a good default value\n            pool.loanToValue = 85;\n        } else if (_volatility == LibFacet.TokenVolatility.high) {\n            pool.rates.interestRateSlopeAbove = 250 * WadRayMath.RAY;\n            pool.rates.interestRateSlopeBelow = 8 * WadRayMath.RAY;\n            pool.rates.baseVariableBorrowRate = 0 * WadRayMath.RAY;\n            pool.rates.targetUtilisationRate = 70;\n            pool.liquidationThreshold = 70;\n            pool.loanToValue = 65;\n        }\n    }\n}\n"
    },
    "contracts/LendingPoolCore.sol": {
      "content": "// SPDX-License-Identifier: No-License\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./libraries/LibFacet.sol\";\nimport \"./libraries/WadRayMath.sol\";\n\ncontract LendingPoolCore {\n    using WadRayMath for uint256;\n\n    function deposit(\n        address _pool,\n        address _user,\n        uint256 _amount\n    ) external payable {\n        if (_pool == LibFacet.facetStorage().ethAddress)\n            return depositEth(_pool, _user, _amount);\n\n        require(\n            ERC20(_pool).balanceOf(_user) >= _amount,\n            \"Insufficient token balance.\"\n        );\n        updatePoolOnDeposit(_pool, _amount);\n        ERC20(_pool).transferFrom(_user, address(this), _amount);\n    }\n\n    function depositEth(\n        address _pool,\n        address _user,\n        uint256 _amount\n    ) internal {\n        require(_user.balance >= _amount, \"Insufficient ETH balance.\");\n        updatePoolOnDeposit(_pool, _amount);\n        (bool success, ) = _user.call{value: _amount}(\"\");\n        require(success, \"Error while sending eth.\");\n    }\n\n    function redeem(\n        address _pool,\n        address _user,\n        uint256 _amount\n    ) external {\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\n        require(\n            pool.user[_user].liquidityProvided >= _amount,\n            \"Can't redeem more than has been deposited.\"\n        );\n        require(\n            pool.totalLiquidity >= _amount,\n            \"Pool does not have enough resources at the current moment.\"\n        );\n        updatePoolIndexes(pool);\n        uint256 ethAmount = getEthValue(_pool, _amount);\n        require(\n            getHealthFactor(\n                pool.user[_user].collateralEthBalance - ethAmount,\n                pool.user[_user].liquidationThreshold,\n                pool.user[_user].compoundedBorrowBalance\n            ) > 1,\n            \"Cannot redeem as it will cause your loan health factor to drop below 1.\"\n        );\n        pool.user[_user].collateralEthBalance -= ethAmount;\n        pool.user[_user].liquidityProvided -= _amount;\n        pool.totalLiquidity -= _amount;\n        updatePoolRates(pool);\n        if (_pool == LibFacet.facetStorage().ethAddress) {\n            (bool success, ) = _user.call{value: _amount}(\"\");\n            require(success, \"Error transfering ETH.\");\n        } else ERC20(_pool).transferFrom(address(this), _user, _amount);\n    }\n\n    function borrow(\n        address _pool,\n        address _user,\n        uint256 _amount\n    ) external payable {}\n\n    function getEthValue(address _token, uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 loanToValue = LibFacet.lpcStorage().pools[_token].loanToValue;\n        return ((_amount * loanToValue) / 100);\n    }\n\n    function updatePoolOnDeposit(address _pool, uint256 _amount) internal {\n        LibFacet.Pool storage pool = LibFacet.lpcStorage().pools[_pool];\n        updatePoolIndexes(pool);\n        pool.totalLiquidity += _amount;\n        updatePoolRates(pool);\n        pool.lastUpdatedTimestamp = block.timestamp;\n        pool.user[msg.sender].liquidityProvided += _amount;\n    }\n\n    function updatePoolIndexes(LibFacet.Pool storage _pool) internal {\n        uint256 yearlyPeriod = getYearlyPeriod(\n            block.timestamp,\n            _pool.lastUpdatedTimestamp,\n            LibFacet.lpcStorage().SECONDS_IN_YEAR\n        );\n        _pool.reserveNormalizedIncome = WadRayMath.rayMul(\n            WadRayMath.rayMul(_pool.rates.currentLiquidityRate, yearlyPeriod) +\n                1,\n            _pool.cumulatedLiquidityIndex\n        );\n        _pool.cumulatedLiquidityIndex = WadRayMath.rayMul(\n            WadRayMath.rayMul(_pool.rates.currentLiquidityRate, yearlyPeriod) +\n                1,\n            _pool.cumulatedLiquidityIndex\n        );\n        _pool.cumulatedVariableBorrowIndex = WadRayMath.rayMul(\n            (1 +\n                WadRayMath.rayDiv(\n                    _pool.rates.variableBorrowRate,\n                    LibFacet.lpcStorage().SECONDS_IN_YEAR\n                ))**(block.timestamp - _pool.lastUpdatedTimestamp),\n            _pool.cumulatedVariableBorrowIndex\n        );\n        for (uint256 i = 0; i < _pool.users.length; i++) {\n            _pool.user[_pool.users[i]].compoundedBorrowBalance = WadRayMath\n                .rayMul(\n                    (\n                        WadRayMath.rayMul(\n                            WadRayMath.rayDiv(\n                                _pool.cumulatedVariableBorrowIndex,\n                                _pool\n                                    .user[_pool.users[i]]\n                                    .cumulatedVariableBorrowIndex\n                            ),\n                            (1 +\n                                WadRayMath.rayDiv(\n                                    _pool.rates.variableBorrowRate,\n                                    LibFacet.lpcStorage().SECONDS_IN_YEAR\n                                ))\n                        )\n                    )**(block.timestamp - _pool.lastUpdatedTimestamp),\n                    _pool.user[_pool.users[i]].principalBorrowBalance\n                );\n            _pool.user[_pool.users[i]].cumulatedVariableBorrowIndex = WadRayMath\n                .rayMul(\n                    (1 +\n                        WadRayMath.rayDiv(\n                            _pool.rates.variableBorrowRate,\n                            LibFacet.lpcStorage().SECONDS_IN_YEAR\n                        ))**(block.timestamp - _pool.lastUpdatedTimestamp),\n                    _pool.user[_pool.users[i]].cumulatedVariableBorrowIndex\n                );\n            _pool.user[_pool.users[i]].healthFactor = getHealthFactor(\n                _pool.user[_pool.users[i]].collateralEthBalance,\n                _pool.user[_pool.users[i]].liquidationThreshold,\n                _pool.user[_pool.users[i]].compoundedBorrowBalance\n            );\n        }\n    }\n\n    function updatePoolRates(LibFacet.Pool storage _pool) internal {\n        _pool.rates.utilisationRate =\n            _pool.totalBorrowedLiquidity /\n            _pool.totalLiquidity;\n        _pool.rates.variableBorrowRate = _pool.rates.utilisationRate <=\n            _pool.rates.targetUtilisationRate\n            ? _pool.rates.baseVariableBorrowRate +\n                WadRayMath.rayMul(\n                    (_pool.rates.utilisationRate /\n                        _pool.rates.targetUtilisationRate),\n                    _pool.rates.interestRateSlopeBelow\n                )\n            : _pool.rates.baseVariableBorrowRate +\n                _pool.rates.interestRateSlopeBelow +\n                WadRayMath.rayMul(\n                    ((_pool.rates.utilisationRate -\n                        _pool.rates.targetUtilisationRate) /\n                        (1 - _pool.rates.targetUtilisationRate)),\n                    _pool.rates.interestRateSlopeAbove\n                );\n        _pool.rates.overallBorrowRate = _pool.totalBorrowedLiquidity == 0\n            ? 0\n            : WadRayMath.rayDiv(\n                WadRayMath.rayMul(\n                    _pool.rates.variableBorrowRate,\n                    _pool.totalVariableBorrowLiquidity\n                ),\n                _pool.totalBorrowedLiquidity\n            );\n        _pool.rates.currentLiquidityRate = WadRayMath.rayMul(\n            _pool.rates.overallBorrowRate,\n            _pool.rates.utilisationRate\n        );\n    }\n\n    function test(address _pool) external view returns (uint256) {\n        return LibFacet.lpcStorage().pools[_pool].totalLiquidity;\n    }\n\n    function getYearlyPeriod(\n        uint256 _timestamp,\n        uint256 _lastUpdatedTimestamp,\n        uint256 _secondsInAYear\n    ) internal pure returns (uint256) {\n        return\n            WadRayMath.wadDiv(\n                WadRayMath.WAD * (_timestamp - _lastUpdatedTimestamp),\n                _secondsInAYear\n            );\n    }\n\n    function getHealthFactor(\n        uint256 _collateralEth,\n        uint256 _liquidationThreshold,\n        uint256 _compoundedBorrowBalance\n    ) internal pure returns (uint256) {\n        return\n            WadRayMath.rayDiv(\n                WadRayMath.rayMul(_collateralEth, _liquidationThreshold),\n                _compoundedBorrowBalance\n            );\n    }\n}\n"
    },
    "contracts/libraries/LibFacet.sol": {
      "content": "// SPDX-License-Identifier: No-License\npragma solidity 0.8.17;\n\nlibrary LibFacet {\n    bytes32 constant LENDING_POOL_CORE_STORAGE_POSITION =\n        keccak256(\"diamonds.standart.lending.pool.core.storage\");\n    bytes32 constant FACET_STORAGE_POSITION =\n        keccak256(\"diamonds.standart.facet.storage\");\n\n    // user data tied to his deposit\n    struct UserPoolData {\n        uint256 liquidityProvided;\n        uint256 principalBorrowBalance;\n        uint256 cumulatedVariableBorrowIndex; // interest cumulated by the variable borrows of the specific user\n        uint256 compoundedBorrowBalance; // princialBorrowBalance + cumulatedVariableBorrowIndex\n        uint256 collateralEthBalance;\n        uint256 liquidationThreshold;\n        uint256 originationFee;\n        uint256 healthFactor;\n    }\n\n    struct Pool {\n        uint256 totalLiquidity;\n        uint256 totalBorrowedLiquidity;\n        uint256 totalVariableBorrowLiquidity;\n        uint256 depositApy; // utilisation rate * (share of variable borrows * variable rate)\n        uint256 cumulatedLiquidityIndex; // interest cumulated by the reserve during the time interval Dt\n        uint256 reserveNormalizedIncome; // Ongoing interest cumulated by the reserve\n        uint256 cumulatedVariableBorrowIndex;\n        uint256 loanToValue; // weighted average of the LTVs of the currencies making up the reserve\n        uint256 liquidationThreshold;\n        uint256 liquidationBonus; // represented in percentage\n        uint256 lastUpdatedTimestamp;\n        bool isBorrowingEnabled;\n        bool isUsableAsCollateral;\n        bool isActive;\n        bool isFreezed; // only allow repays and redeems, but not deposits, new borrowings or rate swap.\n        InterestRate rates;\n        mapping(address => UserPoolData) user;\n        address[] users;\n    }\n\n    struct LPCStorage {\n        mapping(address => Pool) pools;\n        address[] allPools;\n        uint256 SECONDS_IN_YEAR;\n    }\n\n    struct FacetStorage {\n        address ethAddress;\n        address lpcAddress;\n    }\n\n    struct InterestRate {\n        uint256 utilisationRate;\n        uint256 targetUtilisationRate;\n        uint256 interestRateSlopeBelow; // constant representing the scaling of the interest rate vs the utilization.\n        uint256 interestRateSlopeAbove;\n        uint256 baseVariableBorrowRate; // constant for totalBorrows = 0. Expressed in ray\n        uint256 variableBorrowRate;\n        uint256 overallBorrowRate; // (VariableBorrowRate * TotalVariableBorrows) / totalBorrows\n        uint256 currentLiquidityRate; // overallBorrowRate * utilizationRate\n    }\n\n    enum TokenVolatility {\n        low,\n        high\n    }\n\n    struct InterestRateStorage {\n        TokenVolatility volatility;\n    }\n\n    function lpcStorage() internal pure returns (LPCStorage storage lpcs) {\n        bytes32 position = LENDING_POOL_CORE_STORAGE_POSITION;\n        assembly {\n            lpcs.slot := position\n        }\n    }\n\n    function facetStorage() internal pure returns (FacetStorage storage fs) {\n        bytes32 position = FACET_STORAGE_POSITION;\n        assembly {\n            fs.slot := position\n        }\n    }\n}\n"
    },
    "contracts/libraries/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\n/**\n * @title WadRayMath library\n * @author Aave\n * @notice Provides functions to perform calculations with Wad and Ray units\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\n * with 27 digits of precision)\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\n **/\nlibrary WadRayMath {\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant HALF_WAD = 0.5e18;\n\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant HALF_RAY = 0.5e27;\n\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n    /**\n     * @dev Multiplies two wad, rounding half up to the nearest wad\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Wad\n     * @param b Wad\n     * @return c = a*b, in wad\n     **/\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\n        assembly {\n            // Equivalent to require(x == 0 || (x * y) / x == y)\n            if iszero(\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))\n            ) {\n                revert(0, 0)\n            }\n\n            c := div(add(mul(a, b), HALF_WAD), WAD)\n        }\n    }\n\n    /**\n     * @dev Divides two wad, rounding half up to the nearest wad\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Wad\n     * @param b Wad\n     * @return c = a/b, in wad\n     **/\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\n        assembly {\n            if or(\n                iszero(b),\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))\n            ) {\n                revert(0, 0)\n            }\n\n            c := div(add(mul(a, WAD), div(b, 2)), b)\n        }\n    }\n\n    /**\n     * @notice Multiplies two ray, rounding half up to the nearest ray\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Ray\n     * @param b Ray\n     * @return c = a raymul b\n     **/\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\n        assembly {\n            if iszero(\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))\n            ) {\n                revert(0, 0)\n            }\n\n            c := div(add(mul(a, b), HALF_RAY), RAY)\n        }\n    }\n\n    /**\n     * @notice Divides two ray, rounding half up to the nearest ray\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Ray\n     * @param b Ray\n     * @return c = a raydiv b\n     **/\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\n        assembly {\n            if or(\n                iszero(b),\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))\n            ) {\n                revert(0, 0)\n            }\n\n            c := div(add(mul(a, RAY), div(b, 2)), b)\n        }\n    }\n\n    /**\n     * @dev Casts ray down to wad\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Ray\n     * @return b = a converted to wad, rounded half up to the nearest wad\n     **/\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\n        assembly {\n            b := div(a, WAD_RAY_RATIO)\n            let remainder := mod(a, WAD_RAY_RATIO)\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\n                b := add(b, 1)\n            }\n        }\n    }\n\n    /**\n     * @dev Converts wad up to ray\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Wad\n     * @return b = a converted in ray\n     **/\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\n        // to avoid overflow, b/WAD_RAY_RATIO == a\n        assembly {\n            b := mul(a, WAD_RAY_RATIO)\n\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\n                revert(0, 0)\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}